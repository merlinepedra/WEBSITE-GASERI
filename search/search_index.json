{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Prior superavit teque rudem coniugis vestros oppressos Lorem markdownum media talibus, sim alti ab enim moveri quod flebile? Ille morti arcus totiens; sed sed postquam abstulit sibila casus, nos sola natae et classemque consequitur ? Herculis ultro posse inque Puer caelum opaci Miranti excussae patrios Parentis amans est truncas fugientem gentis ostendens Caput ut erunt tantoque ast gelida sit illa lyncum veneni portasque ter, mihi! Amphitrite bisque cum unguibus Balearica mixta auctoribus forma, adsit, patriae electra reverentia Semeles exanimi, profanos. Potest alis, vultumque et licet vestrum; pedibus viri laniem iuncti enim vigil? Properas daedalus Romule esse ego nec voce medicamine et pedes fecundaque vulnera ! Exit fidequemunera Tremorque intellectumque Tantalis caluere rerum Iusto pingebat referunt pedes: iussos est aquarum caede, a invidia carebis amans; ventisque considere nostra gravidamve pinus. Somnusque ab orbes fugae ignes; aut nam subeunt quin comitum manus sors Oechalia, sus absentem numen virgineus. Nostrae flumina frondes ciboque faciebant et corpore Celebres vetitis patria figuras Ethemon aestus neque fatentur tendit Spectare veniebat exstinctum venitque arma deorum vires Anigrus atricolor carinas postquam Cephalus, dicar, tela qui suffuderat habet ut erat Latonia spicula acceptus ferens. Carus et moveant verbis de leonem hic domum, fumante odoribus. Quantum Lavini per causam et Auram iunxit nectar. Pontus ne orba , a mentis bis! Manus primus animaeque pomum pavet Vulneribus ausa Phoebus membris vacant Confudit memorabile illis Iubet ne caelum decimum Iovis Veneri, morantur in incepti frater deducere! Turgida sic talia ablata inscius perosus, est tenuit, non valet balatus lacrimas supervolat at. Manum pavens erat, Telchinas capillis fila: tarda illa rictus. Tenuit Phrygibus si lupi faciem Lorem markdownum nuper Erysicthona negarunt Cerberus mixta ab nati quaeque, fontesque, quoque ! Illo tua atque polis ab obsidis Penthea ferrum in nudaque sententia lupum? Praetendens ligno; o animos limina lumina pressanda nubila. Cum lapis amantem carius monitisque Iovemque te tecti, in est labentibus arida tua. Arma non: auras praesignis manu, fingam et cruentas, plurima! ideBasicEide.compileSimmHome.recursion(processorIeeeUdp( bios_memory.mcaTroll(tiff, megabyte), linkFlaming - nosql)); var hardeningHard = crm; var androidCaseWireless = analystUtilityPush * ppcQbeBot; Vulnus stravit me insula quorum ausorum fuit Quamvis furialibus parente quibus experiensque ante ut voce ipse sumpsisse superi, arvo Marte aethera , et terris, dedit. Post nocent agmine fiat in eodem dicentem in deos perstat canes; et. Latus erat cum Athamanta parte Pudore ibat cervum laudando quoque mirer. Toto est placidique te mundi Quirino, in arcu mors, arbore. Ipse Tritoniaca volentem argentea huius latuitque recessit cum liquefaciunt sensura mensas incoluit crescunt. Interea Dulichium nec suum! Caput suum de venabula notus quem sublimis Multas herbas? Manu quod in adest. Nova caeli, cum sed concursibus marem dum prior Iovi porrigit et tuam ignes in in bracchiaque quisquis, clamantia! Animal et regione sed fauces thalamos capuloque ipsum tot corpora Ityosque ademptae, flamine! Et ut certa frugis favistis quod animae vi innitens ignesque et furoris, certe hac spicula palude. Ne vehi diemque Deucalioneas magnas fudit. Amor equae, herbis? Deus ipse fusus Caeneus his latus Protervas poenas conspiceris verbis; animae tum simul Semiramio illam: Daphnes, dixisse. Parens cursus clamorque pensandum insequar naiades clipeoque vates exstinguite altera partibus telum sed. Concita civilibus veneni sorbere vulnera quaerit. Quae positoque recondita Argo gaudia illi barbara gladios ardua, abstulerat damnare . Doceri retegatur crede nescioquam ignava lentoque talia; sic praefixo mandere pariterque sorores; quem ante. file.user_table = external_rom + ipad_digital_kvm; thyristor.ole_osd(maskForum + 5); var packet_ipx = targetRaster + 3; Et morte, est quamvis voce promptas utraque satis aequoris devoveas: manibus axis arbor Hippolytus pressus armis at frigus . Bobus regina domus conplecti quondam; per illius factis bucina cinguntur ex speret , et hospes reversurum in.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#prior-superavit-teque-rudem-coniugis-vestros-oppressos","text":"Lorem markdownum media talibus, sim alti ab enim moveri quod flebile? Ille morti arcus totiens; sed sed postquam abstulit sibila casus, nos sola natae et classemque consequitur ? Herculis ultro posse inque Puer caelum opaci Miranti excussae patrios","title":"Prior superavit teque rudem coniugis vestros oppressos"},{"location":"#parentis-amans-est-truncas-fugientem-gentis-ostendens","text":"Caput ut erunt tantoque ast gelida sit illa lyncum veneni portasque ter, mihi! Amphitrite bisque cum unguibus Balearica mixta auctoribus forma, adsit, patriae electra reverentia Semeles exanimi, profanos. Potest alis, vultumque et licet vestrum; pedibus viri laniem iuncti enim vigil? Properas daedalus Romule esse ego nec voce medicamine et pedes fecundaque vulnera !","title":"Parentis amans est truncas fugientem gentis ostendens"},{"location":"#exit-fidequemunera-tremorque-intellectumque-tantalis-caluere-rerum","text":"Iusto pingebat referunt pedes: iussos est aquarum caede, a invidia carebis amans; ventisque considere nostra gravidamve pinus. Somnusque ab orbes fugae ignes; aut nam subeunt quin comitum manus sors Oechalia, sus absentem numen virgineus. Nostrae flumina frondes ciboque faciebant et corpore Celebres vetitis patria figuras Ethemon aestus neque fatentur tendit","title":"Exit fidequemunera Tremorque intellectumque Tantalis caluere rerum"},{"location":"#spectare-veniebat-exstinctum-venitque-arma-deorum-vires","text":"Anigrus atricolor carinas postquam Cephalus, dicar, tela qui suffuderat habet ut erat Latonia spicula acceptus ferens. Carus et moveant verbis de leonem hic domum, fumante odoribus. Quantum Lavini per causam et Auram iunxit nectar. Pontus ne orba , a mentis bis! Manus primus animaeque pomum pavet Vulneribus ausa Phoebus membris vacant Confudit memorabile illis Iubet ne caelum decimum Iovis Veneri, morantur in incepti frater deducere! Turgida sic talia ablata inscius perosus, est tenuit, non valet balatus lacrimas supervolat at. Manum pavens erat, Telchinas capillis fila: tarda illa rictus.","title":"Spectare veniebat exstinctum venitque arma deorum vires"},{"location":"#tenuit-phrygibus-si-lupi-faciem","text":"Lorem markdownum nuper Erysicthona negarunt Cerberus mixta ab nati quaeque, fontesque, quoque ! Illo tua atque polis ab obsidis Penthea ferrum in nudaque sententia lupum? Praetendens ligno; o animos limina lumina pressanda nubila. Cum lapis amantem carius monitisque Iovemque te tecti, in est labentibus arida tua. Arma non: auras praesignis manu, fingam et cruentas, plurima! ideBasicEide.compileSimmHome.recursion(processorIeeeUdp( bios_memory.mcaTroll(tiff, megabyte), linkFlaming - nosql)); var hardeningHard = crm; var androidCaseWireless = analystUtilityPush * ppcQbeBot;","title":"Tenuit Phrygibus si lupi faciem"},{"location":"#vulnus-stravit-me-insula-quorum-ausorum-fuit","text":"Quamvis furialibus parente quibus experiensque ante ut voce ipse sumpsisse superi, arvo Marte aethera , et terris, dedit. Post nocent agmine fiat in eodem dicentem in deos perstat canes; et.","title":"Vulnus stravit me insula quorum ausorum fuit"},{"location":"#latus-erat-cum-athamanta-parte","text":"Pudore ibat cervum laudando quoque mirer. Toto est placidique te mundi Quirino, in arcu mors, arbore. Ipse Tritoniaca volentem argentea huius latuitque recessit cum liquefaciunt sensura mensas incoluit crescunt. Interea Dulichium nec suum!","title":"Latus erat cum Athamanta parte"},{"location":"#caput-suum-de-venabula-notus-quem-sublimis","text":"Multas herbas? Manu quod in adest. Nova caeli, cum sed concursibus marem dum prior Iovi porrigit et tuam ignes in in bracchiaque quisquis, clamantia! Animal et regione sed fauces thalamos capuloque ipsum tot corpora Ityosque ademptae, flamine! Et ut certa frugis favistis quod animae vi innitens ignesque et furoris, certe hac spicula palude. Ne vehi diemque Deucalioneas magnas fudit. Amor equae, herbis?","title":"Caput suum de venabula notus quem sublimis"},{"location":"#deus-ipse-fusus-caeneus-his-latus","text":"Protervas poenas conspiceris verbis; animae tum simul Semiramio illam: Daphnes, dixisse. Parens cursus clamorque pensandum insequar naiades clipeoque vates exstinguite altera partibus telum sed. Concita civilibus veneni sorbere vulnera quaerit. Quae positoque recondita Argo gaudia illi barbara gladios ardua, abstulerat damnare . Doceri retegatur crede nescioquam ignava lentoque talia; sic praefixo mandere pariterque sorores; quem ante. file.user_table = external_rom + ipad_digital_kvm; thyristor.ole_osd(maskForum + 5); var packet_ipx = targetRaster + 3; Et morte, est quamvis voce promptas utraque satis aequoris devoveas: manibus axis arbor Hippolytus pressus armis at frigus . Bobus regina domus conplecti quondam; per illius factis bucina cinguntur ex speret , et hospes reversurum in.","title":"Deus ipse fusus Caeneus his latus"},{"location":"hr/nastava/materijali/python-django-vj1/","text":"Vje\u017ebe 1: Postavljanje razvojnog okru\u017eenja web aplikacija na operacijskim sustavima sli\u010dnim Unixu i Windowsima. Stvaranje projekta i organizacija koda. Kori\u0161tenje dokumentacije tags: DWA2 Vjezbe Django Pyhton Uvod Instalacija IDE u kojem se radi na vje\u017ebama je Visual Studio Code koji mo\u017eete preuzeti na linku . Nakon \u0161to preuzimete i instalirate VS Code. Pokrenite ga, zatim s kraticom CTRL + SHIFT + X otvorite dio za instalaciju ekstenzija, prona\u0111ite Python i instalirajte ga. Dodatna upustva za instalaciju Python ekstenzije unutar VS Codea mo\u017eete prona\u0107i na linku . Instalacija pip -a (kod sebe doma na WSL ili kakvom god Ubuntuu): $ sudo apt install python3 python3-pip python-is-python3 pylint (Nepreporu\u010deno jer je Django verzija 2.x) Instalacija pakirane verzije Djanga : $ sudo apt install python3-django (Preporu\u010deno jer je Django verzija 3.x) Instalacija Djanga kori\u0161tenjem pip-a (kod sebe doma na WSL ili kakvom god Ubuntuu, uklju\u010duju\u0107i i u\u010dionicu): $ pip3 install Django ili $ python3 -m pip install Django Primjer web sjedi\u0161ta u Djangu: https://www.instagram.com/ (velikim dijelom) http://www.riteh.uniri.hr/ (shoutout: http://www.riteh.uniri.hr/ustroj/zavodi/zr/) Stvaranje prvog Django projekta Stvaranje direktorija gdje \u0107emo stvoriti na\u0161 projekt: $ mkdir moja_prva_stranica Zatim idemo u taj direktorij naredbom $ cd moja_prva_stranica u njemu stvaramo django projekt naredbom: $ django-admin startproject mysite Ostale raspolo\u017eive naredbe mo\u017eemo vidjeti s komandom django-admin , a za detaljnije o pojedinim naredbama koristite django-admin help , npr. za naredbu startproject na na\u010din: $ django-admin help startproject Naredba startproject kreira novi direktorij naziva kojega smo proslijedili, u na\u0161em slu\u010daju to je mysite . Prebacimo se u direktorij mysite pomo\u0107u naredbe cd mysite i ispi\u0161imo sadr\u017eaj direktorija u obiliku stabla s naredbom tree mysite , mo\u017eete koristiti i naredbu ls mysite . mysite \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 mysite \u251c\u2500\u2500 asgi.py \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Direktorij mysite je sredi\u0161nji direktorij na\u0161e stranice koju \u0107emo graditi. Ovo je \"glavna\" tj. sredi\u0161nja aplikacija. Njena uloga je usmjeravanje Djanga na druge aplikacije koje \u0107emo kreirati. Ono \u0161to \u0107emo tu razvijati je samo usmjeravanje na druge aplikacije koje razvijamo i pode\u0161avanje postavki. Projektni direktorij i njegov sadr\u017eaj Sadr\u017eaj koji se nalazi u novo kreiranom projektu: Izvan direktorija mysite/ : korijenski je direktorij koji ima ulogu mjesta gdje se nalaze sve datoteke i direktoriji projekta. Unutar direktorija mysite/ : nalazi se Python package projekta, a njegov sadr\u017eaj je: Datoteka mysite/__init__.py : Govori interpreteru da sve unutar ovoga direktorija bude tretirano kao Python package. Datoteka mysite/settings.py : Postavke/konfiguracija za Django projekt. Obratiti pa\u017enju na INSTALLED_APPS koji nam je trenutno najbitniji dio u ovome fileu koji \u0107e nam trebati. Svaki puta kada se dodaje nova aplikacija na na\u0161u web stranicu, moramo ju ovdje ru\u010dno dodavati. :::danger Paziti na `SECRET_KEY` da nije vidljiv svima, npr. na GitHubu-u. Zlonamjerni pojedinac mo\u017ee to iskoristiti i upravljati va\u0161om stranicom kao administrator. ::: Datoteka mysite/urls.py : Sadr\u017ei deklarirane URLove vezane za Django projekt, slu\u017ei Django aplikaciji kao \"kazalo sadr\u017eaja\". Njegova uloga je 'kontroliranje' na\u0161e stranice/aplikacije. Pomo\u0107u njega 'pokazujemo/usmjeravamo' program na na\u0161e aplikacije. :::warning **Osvje\u017eite si znanje regularnih izraza** - [Regularni izrazi na kolegiju OS1](https://inf2.uniri.hr/reStructuredHgWiki/materijali/grep-sed-awk-tr/#izdvajanje-linija-iz-tekstualnih-datoteka) - [Regularni izrazi i Python](https://docs.python.org/3/library/re.html#module-re) ::: Datoteke mysite/wsgi.py i mysite/asgi.py : ASGI je nasljednik WSGI, dugogodi\u0161njeg Python standarda za kompatibilnost izme\u0111u web poslu\u017eitelja, frameworka i aplikacija. WSGI pove\u0107ava mogu\u0107nosti u radu na webu pomo\u0107u Pythona, dok je cilj ASGI-a produ\u017eiti to za podru\u010dje asinkronog Pythona. Datoteka manage.py : Koristimo pri radu u terminalu za proslje\u0111ivanje raznih naredbi koje proslje\u0111ujemo programu da se izvr\u0161e nad projektom, vi\u0161e o tome u nastavku. Kreiranje prve aplikacije Zapo\u010dnimo s kreiranjem prve aplikacije. Za po\u010detak dodat \u0107emo aplikacije na na\u0161 projekt mysite , to \u010dinimo naredbom: ./manage.py startapp main . Primijetit \u0107ete da u direktoriju mysite je stvoren novi poddirektorij naziva main . :::success Zadatak Provjerite sadr\u017eaj direktorija mysite/mysite i direktorija mysite/main s naredbama tree i ls . ::: Lokalni poslu\u017eitelj za razvoj Pokrenimo sada na\u0161 lokalni poslu\u017eitelj ( eng.server ) na kojemu \u0107emo razvijati aplikaciju. :::warning Napomena za pokretanje lokalnog poslu\u017eitelja Za pokretanje poslu\u017eitelja koristite zasebni terminal. Poslu\u017eitelj aktivno radi za vrijeme razvoja i nije potrebno ponovno pokretati poslu\u017eitelj nakon svake promjene. ::: U zasebnom terminalu za pokretanje poslu\u017eitelja koristi se naredba: $ ./manage.py runserver :::success Zadatak Provjerite rad poslu\u017eitelja posjetom adrese http://127.0.0.1:8000/ u web pregledniku. ::: Ovo je poslu\u017eitelj na kojem \u0107emo razvijati Django aplikacije. U terminalu mo\u017eemo vidjeti HTTP zahtjeve na poslu\u017eitelj i statusni kod odgovora na njih. :::success Zadatak Provjerite ispis u terminalu prilikom osvje\u017eavanja stranice pritiskom na tipki CTRL + R ili F5 . ::: Dodatak: \u010citanje dokumentacije i StackOverflow Tko radi taj i grije\u0161i, a iz gre\u0161aka se najbolje u\u010di. Slu\u017ebenu Django dokumentaciju mo\u017eete prona\u0107i ovdje . Stack Overflow je mjesto za pitanja i odgovore za profesionalne programere i entuzijaste. Sadr\u017ei pitanja i odgovore na \u0161irok raspon tema u ra\u010dunalnom programiranju. Vi\u0161e na Wikipediji . Primjeri pitanja postavljenih na Stack Overflowu vezanih za probleme u Pythonu i Djangu: Primjer 1 Primjer 2 Primjer 3","title":"Vje\u017eba 1"},{"location":"hr/nastava/materijali/python-django-vj1/#vjezbe-1-postavljanje-razvojnog-okruzenja-web-aplikacija-na-operacijskim-sustavima-slicnim-unixu-i-windowsima-stvaranje-projekta-i-organizacija-koda-koristenje-dokumentacije","text":"","title":"Vje\u017ebe 1: Postavljanje razvojnog okru\u017eenja web aplikacija na operacijskim sustavima sli\u010dnim Unixu i Windowsima. Stvaranje projekta i organizacija koda. Kori\u0161tenje dokumentacije"},{"location":"hr/nastava/materijali/python-django-vj1/#tags-dwa2-vjezbe-django-pyhton-uvod","text":"","title":"tags: DWA2 Vjezbe Django Pyhton Uvod"},{"location":"hr/nastava/materijali/python-django-vj1/#instalacija","text":"IDE u kojem se radi na vje\u017ebama je Visual Studio Code koji mo\u017eete preuzeti na linku . Nakon \u0161to preuzimete i instalirate VS Code. Pokrenite ga, zatim s kraticom CTRL + SHIFT + X otvorite dio za instalaciju ekstenzija, prona\u0111ite Python i instalirajte ga. Dodatna upustva za instalaciju Python ekstenzije unutar VS Codea mo\u017eete prona\u0107i na linku . Instalacija pip -a (kod sebe doma na WSL ili kakvom god Ubuntuu): $ sudo apt install python3 python3-pip python-is-python3 pylint (Nepreporu\u010deno jer je Django verzija 2.x) Instalacija pakirane verzije Djanga : $ sudo apt install python3-django (Preporu\u010deno jer je Django verzija 3.x) Instalacija Djanga kori\u0161tenjem pip-a (kod sebe doma na WSL ili kakvom god Ubuntuu, uklju\u010duju\u0107i i u\u010dionicu): $ pip3 install Django ili $ python3 -m pip install Django Primjer web sjedi\u0161ta u Djangu: https://www.instagram.com/ (velikim dijelom) http://www.riteh.uniri.hr/ (shoutout: http://www.riteh.uniri.hr/ustroj/zavodi/zr/)","title":"Instalacija"},{"location":"hr/nastava/materijali/python-django-vj1/#stvaranje-prvog-django-projekta","text":"Stvaranje direktorija gdje \u0107emo stvoriti na\u0161 projekt: $ mkdir moja_prva_stranica Zatim idemo u taj direktorij naredbom $ cd moja_prva_stranica u njemu stvaramo django projekt naredbom: $ django-admin startproject mysite Ostale raspolo\u017eive naredbe mo\u017eemo vidjeti s komandom django-admin , a za detaljnije o pojedinim naredbama koristite django-admin help , npr. za naredbu startproject na na\u010din: $ django-admin help startproject Naredba startproject kreira novi direktorij naziva kojega smo proslijedili, u na\u0161em slu\u010daju to je mysite . Prebacimo se u direktorij mysite pomo\u0107u naredbe cd mysite i ispi\u0161imo sadr\u017eaj direktorija u obiliku stabla s naredbom tree mysite , mo\u017eete koristiti i naredbu ls mysite . mysite \u251c\u2500\u2500 manage.py \u2514\u2500\u2500 mysite \u251c\u2500\u2500 asgi.py \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 settings.py \u251c\u2500\u2500 urls.py \u2514\u2500\u2500 wsgi.py Direktorij mysite je sredi\u0161nji direktorij na\u0161e stranice koju \u0107emo graditi. Ovo je \"glavna\" tj. sredi\u0161nja aplikacija. Njena uloga je usmjeravanje Djanga na druge aplikacije koje \u0107emo kreirati. Ono \u0161to \u0107emo tu razvijati je samo usmjeravanje na druge aplikacije koje razvijamo i pode\u0161avanje postavki.","title":"Stvaranje prvog Django projekta"},{"location":"hr/nastava/materijali/python-django-vj1/#projektni-direktorij-i-njegov-sadrzaj","text":"Sadr\u017eaj koji se nalazi u novo kreiranom projektu: Izvan direktorija mysite/ : korijenski je direktorij koji ima ulogu mjesta gdje se nalaze sve datoteke i direktoriji projekta. Unutar direktorija mysite/ : nalazi se Python package projekta, a njegov sadr\u017eaj je: Datoteka mysite/__init__.py : Govori interpreteru da sve unutar ovoga direktorija bude tretirano kao Python package. Datoteka mysite/settings.py : Postavke/konfiguracija za Django projekt. Obratiti pa\u017enju na INSTALLED_APPS koji nam je trenutno najbitniji dio u ovome fileu koji \u0107e nam trebati. Svaki puta kada se dodaje nova aplikacija na na\u0161u web stranicu, moramo ju ovdje ru\u010dno dodavati. :::danger Paziti na `SECRET_KEY` da nije vidljiv svima, npr. na GitHubu-u. Zlonamjerni pojedinac mo\u017ee to iskoristiti i upravljati va\u0161om stranicom kao administrator. ::: Datoteka mysite/urls.py : Sadr\u017ei deklarirane URLove vezane za Django projekt, slu\u017ei Django aplikaciji kao \"kazalo sadr\u017eaja\". Njegova uloga je 'kontroliranje' na\u0161e stranice/aplikacije. Pomo\u0107u njega 'pokazujemo/usmjeravamo' program na na\u0161e aplikacije. :::warning **Osvje\u017eite si znanje regularnih izraza** - [Regularni izrazi na kolegiju OS1](https://inf2.uniri.hr/reStructuredHgWiki/materijali/grep-sed-awk-tr/#izdvajanje-linija-iz-tekstualnih-datoteka) - [Regularni izrazi i Python](https://docs.python.org/3/library/re.html#module-re) ::: Datoteke mysite/wsgi.py i mysite/asgi.py : ASGI je nasljednik WSGI, dugogodi\u0161njeg Python standarda za kompatibilnost izme\u0111u web poslu\u017eitelja, frameworka i aplikacija. WSGI pove\u0107ava mogu\u0107nosti u radu na webu pomo\u0107u Pythona, dok je cilj ASGI-a produ\u017eiti to za podru\u010dje asinkronog Pythona. Datoteka manage.py : Koristimo pri radu u terminalu za proslje\u0111ivanje raznih naredbi koje proslje\u0111ujemo programu da se izvr\u0161e nad projektom, vi\u0161e o tome u nastavku.","title":"Projektni direktorij i njegov sadr\u017eaj"},{"location":"hr/nastava/materijali/python-django-vj1/#kreiranje-prve-aplikacije","text":"Zapo\u010dnimo s kreiranjem prve aplikacije. Za po\u010detak dodat \u0107emo aplikacije na na\u0161 projekt mysite , to \u010dinimo naredbom: ./manage.py startapp main . Primijetit \u0107ete da u direktoriju mysite je stvoren novi poddirektorij naziva main . :::success Zadatak Provjerite sadr\u017eaj direktorija mysite/mysite i direktorija mysite/main s naredbama tree i ls . :::","title":"Kreiranje prve aplikacije"},{"location":"hr/nastava/materijali/python-django-vj1/#lokalni-posluzitelj-za-razvoj","text":"Pokrenimo sada na\u0161 lokalni poslu\u017eitelj ( eng.server ) na kojemu \u0107emo razvijati aplikaciju. :::warning Napomena za pokretanje lokalnog poslu\u017eitelja Za pokretanje poslu\u017eitelja koristite zasebni terminal. Poslu\u017eitelj aktivno radi za vrijeme razvoja i nije potrebno ponovno pokretati poslu\u017eitelj nakon svake promjene. ::: U zasebnom terminalu za pokretanje poslu\u017eitelja koristi se naredba: $ ./manage.py runserver :::success Zadatak Provjerite rad poslu\u017eitelja posjetom adrese http://127.0.0.1:8000/ u web pregledniku. ::: Ovo je poslu\u017eitelj na kojem \u0107emo razvijati Django aplikacije. U terminalu mo\u017eemo vidjeti HTTP zahtjeve na poslu\u017eitelj i statusni kod odgovora na njih. :::success Zadatak Provjerite ispis u terminalu prilikom osvje\u017eavanja stranice pritiskom na tipki CTRL + R ili F5 . :::","title":"Lokalni poslu\u017eitelj za razvoj"},{"location":"hr/nastava/materijali/python-django-vj1/#dodatak-citanje-dokumentacije-i-stackoverflow","text":"Tko radi taj i grije\u0161i, a iz gre\u0161aka se najbolje u\u010di. Slu\u017ebenu Django dokumentaciju mo\u017eete prona\u0107i ovdje . Stack Overflow je mjesto za pitanja i odgovore za profesionalne programere i entuzijaste. Sadr\u017ei pitanja i odgovore na \u0161irok raspon tema u ra\u010dunalnom programiranju. Vi\u0161e na Wikipediji . Primjeri pitanja postavljenih na Stack Overflowu vezanih za probleme u Pythonu i Djangu: Primjer 1 Primjer 2 Primjer 3","title":"Dodatak: \u010citanje dokumentacije i StackOverflow"},{"location":"hr/nastava/materijali/python-django-vj10/","text":"Vje\u017eba 10: Autentifikacija. Autorizacija Stvaranje projekta :::info Priprema za rad Stvorite projekt naziva vj10 , unutar njega aplikaciju naziva main . Provedite migraciju. Zatim kreirajte administratora, za stvaranje korisnika sa administratorskim ovlastima koristite naredbu ./manage.py createsuperuser . ::: Povezivanje projekta i aplikacije :::info vj10/urls.py urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( '' , include ( 'main.urls' )), path ( 'accounts/' , include ( 'django.contrib.auth.urls' )) ] ::: Homepage :::info main/urls.py from django.urls import path from . import views urlpatterns = [ path ( '' , views . index , name = 'index' ), ] ::: Stvaranje pogleda za index def index ( request ): return render ( request , 'main/index.html' ) Unutar aplikacije main stvorite si direktorij templates , unutar kojeg kreirate index.html . Html template: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title ></ title > </ head > < body > </ body > </ html > Kreiranje korisnika :::info Posjetite /accounts i /accounts/login . ::: Prilikom posjete /accounts/login/ javila se gre\u0161ka TemplateDoesNotExist at /accounts/login/ . Gdje mo\u017eemo vidjeti iz poruke Exception Value: registration/login.html da Django ne mo\u017ee prona\u0107i tra\u017eeni predlo\u017eak. :::success Zadatak Unutar templates/registration stvorite login.html . ::: Login {% if form.errors %} < h3 > Unos nije ispravan. </ h3 > {% endif %} {% if next %} {% if user.is_authenticated %} < p > Your account doesn't have access to this page. To proceed, please login with an account that has access. </ p > {% else %} < p > Please login to see this page. </ p > {% endif %} {% endif %} < form method = \"post\" action = \"{% url 'login' %}\" > {% csrf_token %} < table > < tr > < td > {{ form.username.label_tag }} </ td > < td > {{ form.username }} </ td > </ tr > < tr > < td > {{ form.password.label_tag }} </ td > < td > {{ form.password }} </ td > </ tr > </ table > < input type = \"submit\" value = \"login\" /> < input type = \"hidden\" name = \"next\" value = \"{{ next }}\" /> </ form > Detaljnije o csrf_tokenu Postavljanje lokacije gdje \u017eelimo da korisnik bude usmjeren nakon uspje\u0161nog logina radimo unutar settings.py , tako da dodamo npr. LOGIN_REDIRECT_URL = '/' za usmjeravanje na index.html . Registracija Za registraciju koristimo gotovu formu sa: from django.contrib.auth.forms import UserCreationForm I kreiramo funkciju register : def register ( request ): form = UserCreationForm () context = { 'form' : form } return render ( request , 'registration/register.html' , context ) Kreirajmo register.html : < form method = \"post\" action = \"{% url 'register' %}\" > {% csrf_token %} {% if form.errors %} < h3 > Greska. </ h3 > {% endif %} {{ form }} < input type = \"submit\" value = \"Register\" /> </ form > Izmjenimo register funkciju: from django.contrib.auth import authenticate , login def register ( request ): if request . method == 'POST' : form = UserCreationForm ( request . POST ) if form . is_valid (): form . save () username = form . cleaned_data [ 'username' ] password = form . cleaned_data [ 'password1' ] user = authenticate ( username = username , password = password ) login ( request , user ) return redirect ( 'index' ) else : form = UserCreationForm () context = { 'form' : form } return render ( request , 'registration/register.html' , context ) Izmjene na index.html ako je korisnik ulogiran. <h1>This is our homepage</h1> {% if user.is_authenticated %} <h3> Vase ime: {{ user.username}} </h3> {% else %} <h3>Niste ulogirani</h3> {% endif %}","title":"Vje\u017eba 10"},{"location":"hr/nastava/materijali/python-django-vj10/#vjezba-10-autentifikacija-autorizacija","text":"","title":"Vje\u017eba 10: Autentifikacija. Autorizacija"},{"location":"hr/nastava/materijali/python-django-vj10/#stvaranje-projekta","text":":::info Priprema za rad Stvorite projekt naziva vj10 , unutar njega aplikaciju naziva main . Provedite migraciju. Zatim kreirajte administratora, za stvaranje korisnika sa administratorskim ovlastima koristite naredbu ./manage.py createsuperuser . ::: Povezivanje projekta i aplikacije :::info vj10/urls.py urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( '' , include ( 'main.urls' )), path ( 'accounts/' , include ( 'django.contrib.auth.urls' )) ] :::","title":"Stvaranje projekta"},{"location":"hr/nastava/materijali/python-django-vj10/#homepage","text":":::info main/urls.py from django.urls import path from . import views urlpatterns = [ path ( '' , views . index , name = 'index' ), ] ::: Stvaranje pogleda za index def index ( request ): return render ( request , 'main/index.html' ) Unutar aplikacije main stvorite si direktorij templates , unutar kojeg kreirate index.html . Html template: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title ></ title > </ head > < body > </ body > </ html >","title":"Homepage"},{"location":"hr/nastava/materijali/python-django-vj10/#kreiranje-korisnika","text":":::info Posjetite /accounts i /accounts/login . ::: Prilikom posjete /accounts/login/ javila se gre\u0161ka TemplateDoesNotExist at /accounts/login/ . Gdje mo\u017eemo vidjeti iz poruke Exception Value: registration/login.html da Django ne mo\u017ee prona\u0107i tra\u017eeni predlo\u017eak. :::success Zadatak Unutar templates/registration stvorite login.html . :::","title":"Kreiranje korisnika"},{"location":"hr/nastava/materijali/python-django-vj10/#login","text":"{% if form.errors %} < h3 > Unos nije ispravan. </ h3 > {% endif %} {% if next %} {% if user.is_authenticated %} < p > Your account doesn't have access to this page. To proceed, please login with an account that has access. </ p > {% else %} < p > Please login to see this page. </ p > {% endif %} {% endif %} < form method = \"post\" action = \"{% url 'login' %}\" > {% csrf_token %} < table > < tr > < td > {{ form.username.label_tag }} </ td > < td > {{ form.username }} </ td > </ tr > < tr > < td > {{ form.password.label_tag }} </ td > < td > {{ form.password }} </ td > </ tr > </ table > < input type = \"submit\" value = \"login\" /> < input type = \"hidden\" name = \"next\" value = \"{{ next }}\" /> </ form > Detaljnije o csrf_tokenu Postavljanje lokacije gdje \u017eelimo da korisnik bude usmjeren nakon uspje\u0161nog logina radimo unutar settings.py , tako da dodamo npr. LOGIN_REDIRECT_URL = '/' za usmjeravanje na index.html .","title":"Login"},{"location":"hr/nastava/materijali/python-django-vj10/#registracija","text":"Za registraciju koristimo gotovu formu sa: from django.contrib.auth.forms import UserCreationForm I kreiramo funkciju register : def register ( request ): form = UserCreationForm () context = { 'form' : form } return render ( request , 'registration/register.html' , context ) Kreirajmo register.html : < form method = \"post\" action = \"{% url 'register' %}\" > {% csrf_token %} {% if form.errors %} < h3 > Greska. </ h3 > {% endif %} {{ form }} < input type = \"submit\" value = \"Register\" /> </ form > Izmjenimo register funkciju: from django.contrib.auth import authenticate , login def register ( request ): if request . method == 'POST' : form = UserCreationForm ( request . POST ) if form . is_valid (): form . save () username = form . cleaned_data [ 'username' ] password = form . cleaned_data [ 'password1' ] user = authenticate ( username = username , password = password ) login ( request , user ) return redirect ( 'index' ) else : form = UserCreationForm () context = { 'form' : form } return render ( request , 'registration/register.html' , context ) Izmjene na index.html ako je korisnik ulogiran. <h1>This is our homepage</h1> {% if user.is_authenticated %} <h3> Vase ime: {{ user.username}} </h3> {% else %} <h3>Niste ulogirani</h3> {% endif %}","title":"Registracija"},{"location":"hr/nastava/materijali/python-django-vj11/","text":"Vjezbe 11: Testiranje https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Testing Unit tests: Najbr\u017ei za izvedbu, testiraju dio koda neovisno o drugim djelovima. def zbroji ( prvi , drugi ): return prvi + drugi def test_zbroji (): assert zbroji ( 3 , 6 ) == 9 Test integracije: Testirajte vi\u0161e dijelova zajedno kako bi se osiguralo da me\u0111usobno dobro sura\u0111uju/rade. Funkcijsko testiranje: Test koji radi na principu da osigurava funkcionalnos iz perspektive krajnjeg korisnika. Najsporiji za izvo\u0111enje. Regresijsko testiranje: Ovaj test reproducira gre\u0161ke koje su se prethodno doga\u0111ale u programoskom kodu. Svaki se test u po\u010detku pokre\u0107e kako bi se provjerilo ako je gre\u0161ka u kodu ispravljena, a zatim se ponovno pokre\u0107e kako bi se osiguralo da nije ponovno uveden nakon kasnijih promjena koda. Za testiranje projekta i programskog koda unutar Django-a koristiti \u0107emo osnovnu klasu za testiranje koja se zove django.test.TestCase . Najzastupljenija je klasa za testiranje, iako neke testove ne provodi \"najbr\u017ee\" (svaki test ne zahtjeva kreiranje baze podataka). class Author ( models . Model ): name = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 50 ) city = models . CharField ( max_length = 60 ) country = models . CharField ( max_length = 50 ) date_of_birth = models . DateField ( null = True , blank = True ) date_of_death = models . DateField ( 'Died' , null = True , blank = True ) def __str__ ( self ): return self . name Prije po\u010detka pisanja samih testova pokrenite si projekt koji smo radili na vje\u017ebama 6. Na merlinu je dostupna .rar datoteka ako ju nemate. :::info Preuzmite i pokrenite projekt vj6 zatim unutar aplikacije main kreirajte direktorij tests . ::: Unutar direktorija tests nalaze se testovi kojima \u0107e se testirati urls.py , views.py i models.py . Naredba koju koristite za pokretanje testova je: ./manage.py test main.tests :::success Zadatak Stvorite testne .py datoteke unutar tests koje koristite za testiranje rada urls.py , views.py i models.py . ::: Testiranje urls.py from django.test import SimpleTestCase from django.urls import reverse , resolve from main.views import homepage , BookList , AuthorList , AuthorBookList class TestUrls ( SimpleTestCase ): def test_homepage_url_is_resolved ( self ): url = reverse ( \"homepage\" ) # print(resolve(url)) self . assertEquals ( resolve ( url ) . func , homepage ) def test_books_url_is_resolved ( self ): url = reverse ( \"books\" ) self . assertEquals ( resolve ( url ) . func . view_class , BookList ) def test_authors_url_is_resolved ( self ): url = reverse ( \"authors\" ) self . assertEquals ( resolve ( url ) . func . view_class , AuthorList ) def test_authors_url_is_resolved ( self ): url = reverse ( \"author_q\" , args = [ 'some-author' ]) self . assertEquals ( resolve ( url ) . func . view_class , AuthorBookList ) Testiranje views.py from django.test import TestCase , Client from django.urls import reverse from main.models import Author , Book class TestViews ( TestCase ): def setUp ( self ): self . client = Client () self . homepage_url = reverse ( \"homepage\" ) self . authors_q_url = reverse ( \"author_q\" , args = [ 'some-author' ]) self . author1 = Author . objects . create ( name = \"some-author\" , address = \"TestAdress\" , city = \"TestCity\" , country = \"TestCountry\" ) def test_project_homepage_GET ( self ): client = Client () response = client . get ( self . homepage_url ) self . assertEquals ( response . status_code , 200 ) self . assertTemplateUsed ( response , \"base_generic.html\" ) def test_project_authors_GET ( self ): client = Client () response = client . get ( self . authors_q_url ) self . assertEquals ( response . status_code , 200 ) self . assertTemplateUsed ( response , \"main/book_list.html\" ) Testiranje models.py from django.test import TestCase from main.models import Author , Book class Testmodels ( TestCase ): def setUp ( self ): self . author1 = Author . objects . create ( name = \"some-author\" , address = \"TestAdress\" , city = \"TestCity\" , country = \"TestCountry\" ) def test_author ( self ): self . assertEquals ( self . author1 . name , \"some-author\" )","title":"Vje\u017eba 11"},{"location":"hr/nastava/materijali/python-django-vj11/#vjezbe-11-testiranje","text":"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Testing Unit tests: Najbr\u017ei za izvedbu, testiraju dio koda neovisno o drugim djelovima. def zbroji ( prvi , drugi ): return prvi + drugi def test_zbroji (): assert zbroji ( 3 , 6 ) == 9 Test integracije: Testirajte vi\u0161e dijelova zajedno kako bi se osiguralo da me\u0111usobno dobro sura\u0111uju/rade. Funkcijsko testiranje: Test koji radi na principu da osigurava funkcionalnos iz perspektive krajnjeg korisnika. Najsporiji za izvo\u0111enje. Regresijsko testiranje: Ovaj test reproducira gre\u0161ke koje su se prethodno doga\u0111ale u programoskom kodu. Svaki se test u po\u010detku pokre\u0107e kako bi se provjerilo ako je gre\u0161ka u kodu ispravljena, a zatim se ponovno pokre\u0107e kako bi se osiguralo da nije ponovno uveden nakon kasnijih promjena koda. Za testiranje projekta i programskog koda unutar Django-a koristiti \u0107emo osnovnu klasu za testiranje koja se zove django.test.TestCase . Najzastupljenija je klasa za testiranje, iako neke testove ne provodi \"najbr\u017ee\" (svaki test ne zahtjeva kreiranje baze podataka). class Author ( models . Model ): name = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 50 ) city = models . CharField ( max_length = 60 ) country = models . CharField ( max_length = 50 ) date_of_birth = models . DateField ( null = True , blank = True ) date_of_death = models . DateField ( 'Died' , null = True , blank = True ) def __str__ ( self ): return self . name Prije po\u010detka pisanja samih testova pokrenite si projekt koji smo radili na vje\u017ebama 6. Na merlinu je dostupna .rar datoteka ako ju nemate. :::info Preuzmite i pokrenite projekt vj6 zatim unutar aplikacije main kreirajte direktorij tests . ::: Unutar direktorija tests nalaze se testovi kojima \u0107e se testirati urls.py , views.py i models.py . Naredba koju koristite za pokretanje testova je: ./manage.py test main.tests :::success Zadatak Stvorite testne .py datoteke unutar tests koje koristite za testiranje rada urls.py , views.py i models.py . :::","title":"Vjezbe 11: Testiranje"},{"location":"hr/nastava/materijali/python-django-vj11/#testiranje-urlspy","text":"from django.test import SimpleTestCase from django.urls import reverse , resolve from main.views import homepage , BookList , AuthorList , AuthorBookList class TestUrls ( SimpleTestCase ): def test_homepage_url_is_resolved ( self ): url = reverse ( \"homepage\" ) # print(resolve(url)) self . assertEquals ( resolve ( url ) . func , homepage ) def test_books_url_is_resolved ( self ): url = reverse ( \"books\" ) self . assertEquals ( resolve ( url ) . func . view_class , BookList ) def test_authors_url_is_resolved ( self ): url = reverse ( \"authors\" ) self . assertEquals ( resolve ( url ) . func . view_class , AuthorList ) def test_authors_url_is_resolved ( self ): url = reverse ( \"author_q\" , args = [ 'some-author' ]) self . assertEquals ( resolve ( url ) . func . view_class , AuthorBookList )","title":"Testiranje urls.py"},{"location":"hr/nastava/materijali/python-django-vj11/#testiranje-viewspy","text":"from django.test import TestCase , Client from django.urls import reverse from main.models import Author , Book class TestViews ( TestCase ): def setUp ( self ): self . client = Client () self . homepage_url = reverse ( \"homepage\" ) self . authors_q_url = reverse ( \"author_q\" , args = [ 'some-author' ]) self . author1 = Author . objects . create ( name = \"some-author\" , address = \"TestAdress\" , city = \"TestCity\" , country = \"TestCountry\" ) def test_project_homepage_GET ( self ): client = Client () response = client . get ( self . homepage_url ) self . assertEquals ( response . status_code , 200 ) self . assertTemplateUsed ( response , \"base_generic.html\" ) def test_project_authors_GET ( self ): client = Client () response = client . get ( self . authors_q_url ) self . assertEquals ( response . status_code , 200 ) self . assertTemplateUsed ( response , \"main/book_list.html\" )","title":"Testiranje views.py"},{"location":"hr/nastava/materijali/python-django-vj11/#testiranje-modelspy","text":"from django.test import TestCase from main.models import Author , Book class Testmodels ( TestCase ): def setUp ( self ): self . author1 = Author . objects . create ( name = \"some-author\" , address = \"TestAdress\" , city = \"TestCity\" , country = \"TestCountry\" ) def test_author ( self ): self . assertEquals ( self . author1 . name , \"some-author\" )","title":"Testiranje models.py"},{"location":"hr/nastava/materijali/python-django-vj12/","text":"Django REST framework Na dana\u0161njim vje\u017ebama raditi \u0107emo sa bibliotekom djangorestframework . Po\u010detak rada Za po\u010detak rada potrebno je stvoriti novi projekt i unutar njega aplikaciju. django-admin startproject vj11 cd vj11 django-admin startapp main :::success Nakon \u0161to ste kreirali aplikaciju, pove\u017eite ju sa projektom i kreirajte administratora. ::: INSTALLED_APPS = [ ... 'main.apps.MainConfig', ... ] ./manage.py createsuperuser --username admin Kreiranje modela Unutar main/models.py potrebno je kreirati model. Podatke koji \u0107e biti uneseni u bazu biti \u0107e naknadno vra\u0107ani na zahtjev. Kreiranje modela: from django.db import models class Korisnik ( models . Model ): name = models . CharField ( max_length = 60 ) surname = models . CharField ( max_length = 60 ) def __str__ ( self ): return self . name Nakon kreiranog modela potrebno je izvr\u0161iti migracije: ./manage.py makemigrations ./manage.py migrate :::success Registrirajte kreirani model Korisnik unutar admin.py. Pokrenite server i provjerite prikaz unutar admin su\u010delja a zatim unesite podatke za 3 korisnika. :::spoiler Rje\u0161enje from django.contrib import admin from .models import Korisnik admin . site . register ( Korisnik ) ::: Postavljanje Django REST Framework-a Instalacija djangorestframework biblioteke: pip install djangorestframework Pod instalirane aplikacije potrebno je dodati i rest_framework . INSTALLED_APPS = [ ... 'rest_framework', ... ] Serijalizacija Prvi korak u kreiranju Web API-ja je pru\u017eanje na\u010dina srijalizacije instanci u obliku reprezentacije json. To mo\u017eemo u\u010diniti deklariranjem serijalizatora, princip rada sli\u010dan je formama u Django-u. Sljede'i korak je kreiranje serializers.py unutar main aplikacije. Koji \u0107emo koristiti za prikaz podataka. touch ./main/serializers.py #main/serializers.py from rest_framework import serializers from main.models import Korisnik class KorisnikSerializer ( serializers . HyperlinkedModelSerializer ): class Meta : model = Korisnik fields = ( 'name' , 'surname' ) Pogledi Idemo sada kreirati prikaz unutar views.py Ono \u0161to \u017eelimo da na\u0161i pogledi rade je upit nad svim korisnicima u bazi. A zatim taj upit prosljediti serializeru za korisnika kojeg smo prethodno kreirali. #main/views.py from rest_framework import viewsets from main.serializers import KorisnikSerializer from main.models import Korisnik class KorisnikViewSet ( viewsets . ModelViewSet ): queryset = Korisnik . objects . all () . order_by ( 'name' ) serializer_class = KorisnikSerializer URL-ovi Idemo sada sve to zajedno povezati unutar views.py Because we're using viewsets instead of views, we can automatically generate the URL conf for our API, by simply registering the viewsets with a router class. Again, if we need more control over the API URLs we can simply drop down to using regular class-based views, and writing the URL conf explicitly. Finally, we're including default login and logout views for use with the browsable API. That's optional, but useful if your API requires authentication and you want to use the browsable API. #vj11/urls.py from djagno.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'amidn/' , admin . site . urls ), path ( '' , include ( 'main.urls' )) ] #main/urls.py from django.urls import include , path from rest_framework import routers from . import views router = routers . DefaultRouter () router . register ( r 'korisnici' , views . KorisnikViewSet ) urlpatterns = [ path ( '' , include ( router . urls )), path ( 'api-auth/' , include ( 'rest_framework.urls' , namespace = 'rest_framework' )) ] Testiranje ./manage.py runserver sudo apt install httpie http -a admin:admin http://127.0.0.1:8000/korisnici/ Zadatak Kreirajte model Vozilo koje \u0107e sadr\u017eavati polja model i godina_proizvodnje . A zatim kreirajte serializer koji \u0107e vra\u0107ati podatke o modelima vozila koja su upisana u bazu podataka.","title":"Vje\u017eba 12"},{"location":"hr/nastava/materijali/python-django-vj12/#django-rest-framework","text":"Na dana\u0161njim vje\u017ebama raditi \u0107emo sa bibliotekom djangorestframework .","title":"Django REST framework"},{"location":"hr/nastava/materijali/python-django-vj12/#pocetak-rada","text":"Za po\u010detak rada potrebno je stvoriti novi projekt i unutar njega aplikaciju. django-admin startproject vj11 cd vj11 django-admin startapp main :::success Nakon \u0161to ste kreirali aplikaciju, pove\u017eite ju sa projektom i kreirajte administratora. ::: INSTALLED_APPS = [ ... 'main.apps.MainConfig', ... ] ./manage.py createsuperuser --username admin","title":"Po\u010detak rada"},{"location":"hr/nastava/materijali/python-django-vj12/#kreiranje-modela","text":"Unutar main/models.py potrebno je kreirati model. Podatke koji \u0107e biti uneseni u bazu biti \u0107e naknadno vra\u0107ani na zahtjev. Kreiranje modela: from django.db import models class Korisnik ( models . Model ): name = models . CharField ( max_length = 60 ) surname = models . CharField ( max_length = 60 ) def __str__ ( self ): return self . name Nakon kreiranog modela potrebno je izvr\u0161iti migracije: ./manage.py makemigrations ./manage.py migrate :::success Registrirajte kreirani model Korisnik unutar admin.py. Pokrenite server i provjerite prikaz unutar admin su\u010delja a zatim unesite podatke za 3 korisnika. :::spoiler Rje\u0161enje from django.contrib import admin from .models import Korisnik admin . site . register ( Korisnik ) :::","title":"Kreiranje modela"},{"location":"hr/nastava/materijali/python-django-vj12/#postavljanje-django-rest-framework-a","text":"Instalacija djangorestframework biblioteke: pip install djangorestframework Pod instalirane aplikacije potrebno je dodati i rest_framework . INSTALLED_APPS = [ ... 'rest_framework', ... ]","title":"Postavljanje Django REST Framework-a"},{"location":"hr/nastava/materijali/python-django-vj12/#serijalizacija","text":"Prvi korak u kreiranju Web API-ja je pru\u017eanje na\u010dina srijalizacije instanci u obliku reprezentacije json. To mo\u017eemo u\u010diniti deklariranjem serijalizatora, princip rada sli\u010dan je formama u Django-u. Sljede'i korak je kreiranje serializers.py unutar main aplikacije. Koji \u0107emo koristiti za prikaz podataka. touch ./main/serializers.py #main/serializers.py from rest_framework import serializers from main.models import Korisnik class KorisnikSerializer ( serializers . HyperlinkedModelSerializer ): class Meta : model = Korisnik fields = ( 'name' , 'surname' )","title":"Serijalizacija"},{"location":"hr/nastava/materijali/python-django-vj12/#pogledi","text":"Idemo sada kreirati prikaz unutar views.py Ono \u0161to \u017eelimo da na\u0161i pogledi rade je upit nad svim korisnicima u bazi. A zatim taj upit prosljediti serializeru za korisnika kojeg smo prethodno kreirali. #main/views.py from rest_framework import viewsets from main.serializers import KorisnikSerializer from main.models import Korisnik class KorisnikViewSet ( viewsets . ModelViewSet ): queryset = Korisnik . objects . all () . order_by ( 'name' ) serializer_class = KorisnikSerializer","title":"Pogledi"},{"location":"hr/nastava/materijali/python-django-vj12/#url-ovi","text":"Idemo sada sve to zajedno povezati unutar views.py Because we're using viewsets instead of views, we can automatically generate the URL conf for our API, by simply registering the viewsets with a router class. Again, if we need more control over the API URLs we can simply drop down to using regular class-based views, and writing the URL conf explicitly. Finally, we're including default login and logout views for use with the browsable API. That's optional, but useful if your API requires authentication and you want to use the browsable API. #vj11/urls.py from djagno.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'amidn/' , admin . site . urls ), path ( '' , include ( 'main.urls' )) ] #main/urls.py from django.urls import include , path from rest_framework import routers from . import views router = routers . DefaultRouter () router . register ( r 'korisnici' , views . KorisnikViewSet ) urlpatterns = [ path ( '' , include ( router . urls )), path ( 'api-auth/' , include ( 'rest_framework.urls' , namespace = 'rest_framework' )) ]","title":"URL-ovi"},{"location":"hr/nastava/materijali/python-django-vj12/#testiranje","text":"./manage.py runserver sudo apt install httpie http -a admin:admin http://127.0.0.1:8000/korisnici/ Zadatak Kreirajte model Vozilo koje \u0107e sadr\u017eavati polja model i godina_proizvodnje . A zatim kreirajte serializer koji \u0107e vra\u0107ati podatke o modelima vozila koja su upisana u bazu podataka.","title":"Testiranje"},{"location":"hr/nastava/materijali/python-django-vj2/","text":"Vje\u017ebe 2: Kori\u0161tenje baze podataka. Stvaranje modela i objektno-relacijsko preslikavanje tags: DWA2 Vjezbe Django Django Modeli Pyhton Modeli Paradigma model-view-controller (MVC) Django koristi paradigmu model-view-controller (MVC) koju naziva model-template-view (MTV). Svaka stranica kreirana pomo\u0107u Django frameworka vjerojatno koristi ove tri stvari kako bi vam prikazala podatke. Iako ga nazivamo MVC (model-view-controller), na\u010din na koji radi ide u obrnutom slijedu. Korisnik \u0107e posjetiti URL, va\u0161 kontroler (/urls.py) ukazat \u0107e na odre\u0111eni prikaz (/views.py). Taj se prikaz tada mo\u017ee (ili ne mora) povezati s va\u0161im modelima. Drugim rije\u010dima, prvo ide Controller, zatim View i na posljetku Model po potrebi. Unutar Djanga koristi se djelomi\u010dno izmijenjena terminologija. Stoga od sad nadalje koristit \u0107emo Django terminologiju (model, template i view). U tablici u nastavku detaljnije su obja\u0161njeni pojmovi i termini koji se koriste. Kori\u0161teni naziv Django naziv Zna\u010denje Model Model Sloj modela u Djangu odnosi se na bazu podataka plus Python k\u00f4d koji je izravno koristi. Modelira stvarnost. Pohranjuje sve potrebne vrijednosti unutar baze podataka koje su potrebne web aplikaciji. Django vam omogu\u0107uje pisanje Python klasa koje nazivamo modeli, koje se vezuju za tablice baze podataka. Stvoreni modeli nisu trajno zadani, nego se mogu izmjenjivati i dopunjavati. Izmjene su dostupne odmah nakon primjene migracija o kojima detaljnije kasnije na ovim vje\u017ebama u poglavlju ORM. View Template View sloj u Djangu odnosi se na korisni\u010dko su\u010delje (UI). Funkcija pregleda ili skra\u0107eno prikaz ( eng. view ) je Python funkcija koja je zadu\u017eena za generiranje HTMLa i ostalih UI elemenata. Pomo\u0107u Python k\u00f4da renderiraju se pogledi. Django uzima web zahtjev i vra\u0107a web odgovor. Ovaj odgovor mo\u017ee biti bilo \u0161to, npr. HTML sadr\u017eaj web stranice, preusmjeravanje, statusni kod , XML dokument ili slika... Controller View Sredi\u0161nji dio sustava, sadr\u017eava logiku koja povezuje cjeline da bi se pru\u017eio odgovor korisniku na tra\u017eeni zahtjev. Upravlja zahtjevima i odgovorima na njih. uspostavlja vezu s bazom podataka i u\u010ditavanjem datoteka. Uvod u Django: Hello world U nastavku ovog poglavlja prikazano je kako kreirati Django aplikaciju za teksta na po\u010detnoj stranici. Za ovo nije potreban Model nego samo View u kojemu je definiran tekst koji \u017eelimo prikazati na stranici. :::success Zadatak Otvorite datoteku i provjerite \u0161to je zapisano u mysite/mysite/url.py . ::: Za definiranje putanje na koju \u0107e Django primati HTTP zahtjeve iskoristit \u0107emo funkciju django.urls.path() ( dokumentacija ) i usmjerit \u0107emo na administratorsko su\u010delje ( dokumentacija ) :::info mysite/mysite/url.py from django.contrib import admin from django.urls import path urlpatterns = [ path ( 'admin/' , admin . site . urls ), ] ::: Vidimo da imamo samo jedan URL koji se ti\u010de stranice za administraciju koji nam trenutno ne treba. Sljede\u0107e \u0161to je potrebno u\u010diniti je usmjeriti view na URL. Razlog tome je \u0161to Django web stranice vidi kao kolekciju aplikacija koje 'ispisuje' pomo\u0107u danih URLova koji 'pokazuju' Djangu gdje tra\u017eiti. Datoteka urls.py unutar na\u0161e \"primarne\" aplikacije obi\u010dno samo usmjerava na aplikacije. Pa krenimo sa kreiranjem aplikacije, i to na na\u010din da ju kreiramo pomo\u0107u naredbe ./manage.py startapp main . Idemo sada usmjeriti na\u0161 glavni dio Django aplikacije da provjerava, odnosno poziva na\u0161u novostvorenu aplikaciju. To radimo unutar mysite/mysite/url.py : :::info mysite/mysite/url.py from django.contrib import admin from django.urls import path , include #importamo include urlpatterns = [ path ( \"\" , include ( 'main.urls' )), #dodajemo urls path ( 'admin/' , admin . site . urls ), ] ::: Ako pogledamo u folder aplikacije main vidjet \u0107emo da file urls.py ne postoji. Kreirajomo ga i dodajmo sljede\u0107i sadr\u017eaj. :::info mysite/main/urls.py from django.urls import path from . import views app_name = 'main' # here for namespacing of urls. urlpatterns = [ path ( \"\" , views . homepage , name = \"homepage\" ), ] ::: Pro\u0111imo ukratko kroz logiku rada na\u0161eg programa. Prvo se posje\u0107uje mysite/url.py , u URL-u nije proslje\u0111eno ni\u0161ta, stoga odgovara \"\" iz path(\"\", include('main.urls')) . Program ovo tuma\u010di tako da ukljuuje main.urls . Program zatim pronalazi i u\u010ditava main.urls koji se nalazi na lokaciji mysite/main/urls.py i \u010dita njegov sadr\u017eaj. Upravo smo izmjenili sadr\u017eaj tako da smo dodali uzorak \"\" koji odgovara path(\"\", views.homepage, name=\"homepage\") . Ovime smo usmjerili aplikaciju da pokrene funkciju homepage unutar main/views.py koji jo\u0161 nismo izmjenili stoga \u0107emo to sada u\u010diniti rako da dodamo funkciju naziva homepage() . :::info mysite/main/views.py from django.shortcuts import render from django.http import HttpResponse # Create your views here. def homepage ( request ): return HttpResponse ( \"Welcome to homepage! <strong>#samoOIRI</strong>\" ) # primjetiti kori\u0161tenje HTMLa ::: Osvje\u017eimo stranicu 127.0.0.1:8000 u browseru. Modeli: Uvod Nastavak na program iz uvoda. U ovom poglavlju detaljnije je objasnjeno stvaranje modela u djangu. Stvoreni model se mapira na tablicu u bazi podataka. Baza poidataka je ve\u0107 stvorena i mo\u017eete ju vidjeti na lokaciji mysite/mysite . Po defaultu tip baze podataka je .sqlite3 . Tip baze podataka mo\u017eete mjenjati u settings.py pod DATABASES . Stvaranje modela / Model fields Ovime stvaramo novu tablicu u bazi podataka a zadana polja postaju stupci u toj tablici. Automatski se po defaultu kreira primarni klju\u010d iz toga, ali po \u017eelji mo\u017eemo i proizvoljno odrediti da neka od zadanih vrijednosti to bude. :::success Zadatak Otvorite main/models.py i definirajte klasu imena Predmet. U klasi definirajte stupce naziva: predmet_naslov , predmet_sadrzaj i predmet_vrijeme_objave . Njihovi tipovi neka budu CharField() koji ima zadan parametar max_length na 100 , TextField() i DateTimeField() koji ima naziv postavljen na \"date published\" . :::spoiler Rje\u0161enje zadataka class Predmet ( models . Model ): predmet_naslov = models . CharField ( max_length = 100 ) predmet_sadrzaj = models . TextField () predmet_vrijeme_objave = models . DateTimeField ( \"date published\" ) ::: :::success Zadatak Definirajte funkciju __str__() unutar klase Predmet koja vra\u0107a naziv predmeta predmet_naziv . :::spoiler Rje\u0161enje zadataka def __str__ ( self ): return self . predmet_naslov ::: Slu\u017ebena Django dokumentacija o svim poljima unutar modela. ORM Svaki novi model je nova tablica u bazi podataka. Zbog toga moramo napraviti dvije stvari. Prva je pripremiti za migraciju naredbom makemigrations , a zatim napraviti migraciju nredbom migrate . Pokrenimo na\u0161 lokalni server sa naredbom python/python3 manage.py runserver . Primjetite u outputu konzole sljede\u0107u poruku You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions Run 'python manage.py migrate' to apply them . Unesite naredbu da bi pripremili migraciju. python manage.py makemigrations Output u terminalu No changes detected Razlog tomu je \u0161to jo\u0161 nismo povezali main aplikaciju. Na\u010din na koji \u0107emo povezati aplikaciju je taj da ju pozovome unutar INSTALLED_APPS unutar mysite/settings.py . Mo\u017eemo vidjeti da je unutar main/apps.py definirana kalsa MainConfig . Dopunimo sada mysite/settings.py sa pozivom klase MainConfig iz aplikacije main . To radimo na na\u010din da pod INSTALLED_APPS dodamo 'main.apps.MainConfig' . :::info mysite/mysite/settings.py # Application definition INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'main.apps.MainConfig' # ovu liniju dodajemo ] ::: Unesite ponovo naredbu python manage.py makemigrations da bi pripremili migraciju. Migrations for 'main': main\\migrations\\0001_initial.py - Create model Predmet :::success Zadatak Pr\u010ditajte sadr\u017eaj unutar main\\migrations\\0001_initial.py datoteke. ::: Zatim unesimo naredbu python manage.py migrate da bi se migracija izvr\u0161ila. Nakon svakog rada sa modelima, bile to izmjene ili stvaranje novih modela potrebno je napraviti migraciju na na\u010dn makemigrations a zatim migrate . Pogledajmo output u terminalu koji nam vra\u0107a naredba $ python manage.py migrate Output naredbe python manage.py migrate u terminalu: Operations to perform: Apply all migrations: admin, auth, contenttypes, sessions Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying auth.0012_alter_user_first_name_max_length... OK Applying sessions.0001_initial... OK Interakcija sa modelom Za interakciju sa modelom koristimo naredbu python manage.py shell koja pokre\u0107e Python shell. Za po\u010detak uvezimo potrebne modele i pakete naredbama: from main.models import Predmet from django.utils import timezone Za dohva\u0107anje svih objekata koristimo Predmet.objects.all() \u0161to vra\u0107a QuerrySet [] ondosno praznu listu. Dodajmo vrijednosti u novu instancu klase Predmet nazvia novi_predmet pomo\u0107u: novi_predmet = Predmet() novi_predmet.predmet_naslov=\"DWA2\" novi_predmet_sadrzaj=\"ovo je opis predmeta\" novi_predmet.predmet_vrijeme_objave=timezone.now() Pohranimo promjene sa novi_predmet.save() Isprobajmo ponovno naredbu Predmet.objects.all() Kroz predmete se mo\u017ee i iterirati, primjerice kori\u0161tenjem for petlje: for p in Predmet . objects . all (): print ( p . predmet_naslov ) Kreiranje superusera i povezivanje modela Administratora kreiramo naredbom: ./manage.py createsuperuser Dodjelite proizvoljno ime i lozinku, mail adresu trenutno mo\u017eemo ostaviti praznu. :::success Zadatak Posjetite na lokalnom serveru adresu http://127.0.0.1:8000/admin ::: Idemo sada nadopuniti kod i povezati stvoreni model pomo\u0107u mysite/main/admin.py . :::info mysite/main/admin.py from django.contrib import admin from .models import Predmet # Register your models here. admin . site . register ( Predmet ) ::: :::success Zadatak Osvje\u017eite stranicu na adresi http://127.0.0.1:8000/admin :::","title":"Vje\u017eba 2"},{"location":"hr/nastava/materijali/python-django-vj2/#vjezbe-2-koristenje-baze-podataka-stvaranje-modela-i-objektno-relacijsko-preslikavanje","text":"","title":"Vje\u017ebe 2: Kori\u0161tenje baze podataka. Stvaranje modela i objektno-relacijsko preslikavanje"},{"location":"hr/nastava/materijali/python-django-vj2/#tags-dwa2-vjezbe-django-django-modeli-pyhton","text":"","title":"tags: DWA2 Vjezbe Django Django Modeli Pyhton"},{"location":"hr/nastava/materijali/python-django-vj2/#modeli","text":"","title":"Modeli"},{"location":"hr/nastava/materijali/python-django-vj2/#paradigma-model-view-controller-mvc","text":"Django koristi paradigmu model-view-controller (MVC) koju naziva model-template-view (MTV). Svaka stranica kreirana pomo\u0107u Django frameworka vjerojatno koristi ove tri stvari kako bi vam prikazala podatke. Iako ga nazivamo MVC (model-view-controller), na\u010din na koji radi ide u obrnutom slijedu. Korisnik \u0107e posjetiti URL, va\u0161 kontroler (/urls.py) ukazat \u0107e na odre\u0111eni prikaz (/views.py). Taj se prikaz tada mo\u017ee (ili ne mora) povezati s va\u0161im modelima. Drugim rije\u010dima, prvo ide Controller, zatim View i na posljetku Model po potrebi. Unutar Djanga koristi se djelomi\u010dno izmijenjena terminologija. Stoga od sad nadalje koristit \u0107emo Django terminologiju (model, template i view). U tablici u nastavku detaljnije su obja\u0161njeni pojmovi i termini koji se koriste. Kori\u0161teni naziv Django naziv Zna\u010denje Model Model Sloj modela u Djangu odnosi se na bazu podataka plus Python k\u00f4d koji je izravno koristi. Modelira stvarnost. Pohranjuje sve potrebne vrijednosti unutar baze podataka koje su potrebne web aplikaciji. Django vam omogu\u0107uje pisanje Python klasa koje nazivamo modeli, koje se vezuju za tablice baze podataka. Stvoreni modeli nisu trajno zadani, nego se mogu izmjenjivati i dopunjavati. Izmjene su dostupne odmah nakon primjene migracija o kojima detaljnije kasnije na ovim vje\u017ebama u poglavlju ORM. View Template View sloj u Djangu odnosi se na korisni\u010dko su\u010delje (UI). Funkcija pregleda ili skra\u0107eno prikaz ( eng. view ) je Python funkcija koja je zadu\u017eena za generiranje HTMLa i ostalih UI elemenata. Pomo\u0107u Python k\u00f4da renderiraju se pogledi. Django uzima web zahtjev i vra\u0107a web odgovor. Ovaj odgovor mo\u017ee biti bilo \u0161to, npr. HTML sadr\u017eaj web stranice, preusmjeravanje, statusni kod , XML dokument ili slika... Controller View Sredi\u0161nji dio sustava, sadr\u017eava logiku koja povezuje cjeline da bi se pru\u017eio odgovor korisniku na tra\u017eeni zahtjev. Upravlja zahtjevima i odgovorima na njih. uspostavlja vezu s bazom podataka i u\u010ditavanjem datoteka.","title":"Paradigma model-view-controller (MVC)"},{"location":"hr/nastava/materijali/python-django-vj2/#uvod-u-django-hello-world","text":"U nastavku ovog poglavlja prikazano je kako kreirati Django aplikaciju za teksta na po\u010detnoj stranici. Za ovo nije potreban Model nego samo View u kojemu je definiran tekst koji \u017eelimo prikazati na stranici. :::success Zadatak Otvorite datoteku i provjerite \u0161to je zapisano u mysite/mysite/url.py . ::: Za definiranje putanje na koju \u0107e Django primati HTTP zahtjeve iskoristit \u0107emo funkciju django.urls.path() ( dokumentacija ) i usmjerit \u0107emo na administratorsko su\u010delje ( dokumentacija ) :::info mysite/mysite/url.py from django.contrib import admin from django.urls import path urlpatterns = [ path ( 'admin/' , admin . site . urls ), ] ::: Vidimo da imamo samo jedan URL koji se ti\u010de stranice za administraciju koji nam trenutno ne treba. Sljede\u0107e \u0161to je potrebno u\u010diniti je usmjeriti view na URL. Razlog tome je \u0161to Django web stranice vidi kao kolekciju aplikacija koje 'ispisuje' pomo\u0107u danih URLova koji 'pokazuju' Djangu gdje tra\u017eiti. Datoteka urls.py unutar na\u0161e \"primarne\" aplikacije obi\u010dno samo usmjerava na aplikacije. Pa krenimo sa kreiranjem aplikacije, i to na na\u010din da ju kreiramo pomo\u0107u naredbe ./manage.py startapp main . Idemo sada usmjeriti na\u0161 glavni dio Django aplikacije da provjerava, odnosno poziva na\u0161u novostvorenu aplikaciju. To radimo unutar mysite/mysite/url.py : :::info mysite/mysite/url.py from django.contrib import admin from django.urls import path , include #importamo include urlpatterns = [ path ( \"\" , include ( 'main.urls' )), #dodajemo urls path ( 'admin/' , admin . site . urls ), ] ::: Ako pogledamo u folder aplikacije main vidjet \u0107emo da file urls.py ne postoji. Kreirajomo ga i dodajmo sljede\u0107i sadr\u017eaj. :::info mysite/main/urls.py from django.urls import path from . import views app_name = 'main' # here for namespacing of urls. urlpatterns = [ path ( \"\" , views . homepage , name = \"homepage\" ), ] ::: Pro\u0111imo ukratko kroz logiku rada na\u0161eg programa. Prvo se posje\u0107uje mysite/url.py , u URL-u nije proslje\u0111eno ni\u0161ta, stoga odgovara \"\" iz path(\"\", include('main.urls')) . Program ovo tuma\u010di tako da ukljuuje main.urls . Program zatim pronalazi i u\u010ditava main.urls koji se nalazi na lokaciji mysite/main/urls.py i \u010dita njegov sadr\u017eaj. Upravo smo izmjenili sadr\u017eaj tako da smo dodali uzorak \"\" koji odgovara path(\"\", views.homepage, name=\"homepage\") . Ovime smo usmjerili aplikaciju da pokrene funkciju homepage unutar main/views.py koji jo\u0161 nismo izmjenili stoga \u0107emo to sada u\u010diniti rako da dodamo funkciju naziva homepage() . :::info mysite/main/views.py from django.shortcuts import render from django.http import HttpResponse # Create your views here. def homepage ( request ): return HttpResponse ( \"Welcome to homepage! <strong>#samoOIRI</strong>\" ) # primjetiti kori\u0161tenje HTMLa ::: Osvje\u017eimo stranicu 127.0.0.1:8000 u browseru.","title":"Uvod u Django: Hello world"},{"location":"hr/nastava/materijali/python-django-vj2/#modeli-uvod","text":"Nastavak na program iz uvoda. U ovom poglavlju detaljnije je objasnjeno stvaranje modela u djangu. Stvoreni model se mapira na tablicu u bazi podataka. Baza poidataka je ve\u0107 stvorena i mo\u017eete ju vidjeti na lokaciji mysite/mysite . Po defaultu tip baze podataka je .sqlite3 . Tip baze podataka mo\u017eete mjenjati u settings.py pod DATABASES .","title":"Modeli: Uvod"},{"location":"hr/nastava/materijali/python-django-vj2/#stvaranje-modela-model-fields","text":"Ovime stvaramo novu tablicu u bazi podataka a zadana polja postaju stupci u toj tablici. Automatski se po defaultu kreira primarni klju\u010d iz toga, ali po \u017eelji mo\u017eemo i proizvoljno odrediti da neka od zadanih vrijednosti to bude. :::success Zadatak Otvorite main/models.py i definirajte klasu imena Predmet. U klasi definirajte stupce naziva: predmet_naslov , predmet_sadrzaj i predmet_vrijeme_objave . Njihovi tipovi neka budu CharField() koji ima zadan parametar max_length na 100 , TextField() i DateTimeField() koji ima naziv postavljen na \"date published\" . :::spoiler Rje\u0161enje zadataka class Predmet ( models . Model ): predmet_naslov = models . CharField ( max_length = 100 ) predmet_sadrzaj = models . TextField () predmet_vrijeme_objave = models . DateTimeField ( \"date published\" ) ::: :::success Zadatak Definirajte funkciju __str__() unutar klase Predmet koja vra\u0107a naziv predmeta predmet_naziv . :::spoiler Rje\u0161enje zadataka def __str__ ( self ): return self . predmet_naslov ::: Slu\u017ebena Django dokumentacija o svim poljima unutar modela.","title":"Stvaranje modela / Model fields"},{"location":"hr/nastava/materijali/python-django-vj2/#orm","text":"Svaki novi model je nova tablica u bazi podataka. Zbog toga moramo napraviti dvije stvari. Prva je pripremiti za migraciju naredbom makemigrations , a zatim napraviti migraciju nredbom migrate . Pokrenimo na\u0161 lokalni server sa naredbom python/python3 manage.py runserver . Primjetite u outputu konzole sljede\u0107u poruku You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions Run 'python manage.py migrate' to apply them . Unesite naredbu da bi pripremili migraciju. python manage.py makemigrations Output u terminalu No changes detected Razlog tomu je \u0161to jo\u0161 nismo povezali main aplikaciju. Na\u010din na koji \u0107emo povezati aplikaciju je taj da ju pozovome unutar INSTALLED_APPS unutar mysite/settings.py . Mo\u017eemo vidjeti da je unutar main/apps.py definirana kalsa MainConfig . Dopunimo sada mysite/settings.py sa pozivom klase MainConfig iz aplikacije main . To radimo na na\u010din da pod INSTALLED_APPS dodamo 'main.apps.MainConfig' . :::info mysite/mysite/settings.py # Application definition INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'main.apps.MainConfig' # ovu liniju dodajemo ] ::: Unesite ponovo naredbu python manage.py makemigrations da bi pripremili migraciju. Migrations for 'main': main\\migrations\\0001_initial.py - Create model Predmet :::success Zadatak Pr\u010ditajte sadr\u017eaj unutar main\\migrations\\0001_initial.py datoteke. ::: Zatim unesimo naredbu python manage.py migrate da bi se migracija izvr\u0161ila. Nakon svakog rada sa modelima, bile to izmjene ili stvaranje novih modela potrebno je napraviti migraciju na na\u010dn makemigrations a zatim migrate . Pogledajmo output u terminalu koji nam vra\u0107a naredba $ python manage.py migrate Output naredbe python manage.py migrate u terminalu: Operations to perform: Apply all migrations: admin, auth, contenttypes, sessions Running migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying auth.0012_alter_user_first_name_max_length... OK Applying sessions.0001_initial... OK","title":"ORM"},{"location":"hr/nastava/materijali/python-django-vj2/#interakcija-sa-modelom","text":"Za interakciju sa modelom koristimo naredbu python manage.py shell koja pokre\u0107e Python shell. Za po\u010detak uvezimo potrebne modele i pakete naredbama: from main.models import Predmet from django.utils import timezone Za dohva\u0107anje svih objekata koristimo Predmet.objects.all() \u0161to vra\u0107a QuerrySet [] ondosno praznu listu. Dodajmo vrijednosti u novu instancu klase Predmet nazvia novi_predmet pomo\u0107u: novi_predmet = Predmet() novi_predmet.predmet_naslov=\"DWA2\" novi_predmet_sadrzaj=\"ovo je opis predmeta\" novi_predmet.predmet_vrijeme_objave=timezone.now() Pohranimo promjene sa novi_predmet.save() Isprobajmo ponovno naredbu Predmet.objects.all() Kroz predmete se mo\u017ee i iterirati, primjerice kori\u0161tenjem for petlje: for p in Predmet . objects . all (): print ( p . predmet_naslov )","title":"Interakcija sa modelom"},{"location":"hr/nastava/materijali/python-django-vj2/#kreiranje-superusera-i-povezivanje-modela","text":"Administratora kreiramo naredbom: ./manage.py createsuperuser Dodjelite proizvoljno ime i lozinku, mail adresu trenutno mo\u017eemo ostaviti praznu. :::success Zadatak Posjetite na lokalnom serveru adresu http://127.0.0.1:8000/admin ::: Idemo sada nadopuniti kod i povezati stvoreni model pomo\u0107u mysite/main/admin.py . :::info mysite/main/admin.py from django.contrib import admin from .models import Predmet # Register your models here. admin . site . register ( Predmet ) ::: :::success Zadatak Osvje\u017eite stranicu na adresi http://127.0.0.1:8000/admin :::","title":"Kreiranje superusera i povezivanje modela"},{"location":"hr/nastava/materijali/python-django-vj3/","text":"Vje\u017ebe 3: Relacije me\u0111u modelima. Upiti tags: DWA2 Vjezbe Django Django Modeli Pyhton Modeli: Relacije me\u0111u modelima Relacije: Django dokumnetacija - Many to many - One to one - Many to one Many to many Na prethodnim vje\u017ebama stvorili smo model koji sadr\u017eava klasu Predmet, dodajmo sada klasu Student koja \u0107e biti povezana s Predmetom relacijom ManyToMany. :::success Zadatak Model iz Vje\u017ebi2 main/models.py nadopunite tako da stvorite novu klasu Student . Klasa student sadr\u017ei stupce naziva student_ime , student_prezime , student_broj_xice i student_prvi_upis_predmeta . Tipovi podataka neka budu CharField() za student_ime sa max_length na 25 , student_prezime sa max_length na 50 . Vrijednost student_broj_xice postavite na CharField() za student_ime sa max_length na 10 . Dodajte vrijednost student_predmeti koja \u0107e biti povezan s klasom Predmet , tip veze neka bude ManyToMany . Unutar klase Predmet izmijenite vrijednost predmet_vrijeme_objave tako da joj postavite zadanu vrijednost na timezone.now . Nakon kreirane klase pokrenite naredbe makemigrations i migrate . :::spoiler Rje\u0161enje from django.db import models from django.utils import timezone class Predmet ( models . Model ): predmet_naslov = models . CharField ( max_length = 100 ) predmet_sadrzaj = models . TextField () predmet_vrijeme_objave = models . DateTimeField ( default = timezone . now ) def __str__ ( self ): return self . predmet_naslov class Student ( models . Model ): student_ime = models . CharField ( max_length = 25 ) student_prezime = models . CharField ( max_length = 50 ) student_broj_xice = models . CharField ( max_length = 10 ) student_predmeti = models . ManyToManyField ( Predmet ) ::: :::success Zadatak definirajte funkciju __str__() unutar klase Student koja vra\u0107a student_broj_xice . Zatim dodajte klasu Student unutar main/admin.py tako da ona postane vidljiva u admin panelu. :::spoiler Rje\u0161enje #Unutar klase def __str__ ( self ): return self . student_broj_xice #ovaj kod ide u main/admin.py from django.contrib import admin from .models import * model_list = [ Predmet , Student ] admin . site . register ( model_list ) ::: Nakon \u0161to ste nadopunili main/models.py primjenite pripremu i nakon toga migraciju s naredbama makemigrations i migrate . :::info Provjerite radi li vam sve tako da posjetite http://127.0.0.1:8000/admin/ . ::: Many to one :::success Zadatak Definirajte klasu Profesor koja sadr\u017ei vrijednosti, prof_ime i prof_prezime koji su CharField duljine 30, zatim definirajte prof_email koji je tipa EmailField . Unutar klase zadajte __str__ funkciju koja vra\u0107a email adresu od profesora. Nakon kreirane klase pokrenite naredbe makemigrations i migrate . :::spoiler Rje\u0161enje class Profesor ( models . Model ): prof_ime = models . CharField ( max_length = 30 ) prof_prezime = models . CharField ( max_length = 30 ) prof_email = models . EmailField () def __str__ ( self ): return self . prof_email ::: :::success Zadatak Izmijenite klasu Predmet tako da joj dodate nositelja, vrijednost nositelj neka bude tip veze One to many. Za definiranje veze koristite ForeignKey . Nakon kreirane klase pokrenite naredbe makemigrations i migrate . :::spoiler Rje\u0161enje class Predmet ( models . Model ): predmet_naslov = models . CharField ( max_length = 100 ) predmet_sadrzaj = models . TextField () predmet_vrijeme_objave = models . DateTimeField ( default = timezone . now ) predmet_nositelj = models . ForeignKey ( Profesor , on_delete = models . CASCADE ) def __str__ ( self ): return self . predmet_naslov ::: One to one Student i Profesor povezat \u0107emo u klasi Zavrsni_rad, na kojem radi student, dok mu je profesor mentor. Svaki zavr\u0161ni rad ima Studenta koji ga pi\u0161e i profesora koji mu je mentor. Ovo \u0107emo ostvariti One to one vezama. :::success Zadatak Definirajte klasu Zavr\u0161ni_rad . Zavrsni_rad neka ima zadanog nositelja mentor koji je povezan sa Profesor pomo\u0107u OneToOne veze, dodatni parametar koje zadajete u definiciji veze je primary_key=True . Klasu Zavr\u0161ni_rad zatim pove\u017eite sa Student , tip veze neka bude One-to-one , dodatni parametri koje zadajete su on_delete=models.CASCADE i primary_key=True . Zatim dodajte vrijednosti rad_naslov i rad_zadatak koji su CharField duljine 25 i 50 i bool vrijednost rad_prvi_upis koja po defaultu ima vrijednost True . Nakon kreirane klase pokrenite naredbe makemigrations i migrate . :::spoiler Rje\u0161enje class Zavrsni_rad ( models . Model ): mentor = models . OneToOneField ( Profesor , on_delete = models . CASCADE , ) student = models . OneToOneField ( Student , on_delete = models . CASCADE , primary_key = True , ) rad_naslov = models . CharField ( max_length = 50 ) rad_zadatak = models . CharField ( max_length = 50 ) rad_prvi_upis = models . BooleanField ( default = True ) ::: :::success Zadatak Definirajte funkciju __str__() unutar klase Zavr\u0161ni_rad koja vra\u0107a student_broj_xice . Zatim dodajte klasu Zavr\u0161ni rad unutar main/admin.py tako da ona postane vidljiva u admin panelu. :::spoiler Rje\u0161enje #Unutar klase Zavrsni_rad ovo dopunjavamo def __str__ ( self ): return \"Zavrsni rad od: %s \" % self . student . student_broj_xice #u admin.py samo dopunite model_list model_list = [ Predmet , Student , Zavrsni_rad ] ::: :::info manage.py - Nakon svake novo stvorene klase u modelu pokrenite naredbe makemigrations i migrate . - ./manage.py flush koristite za o\u010distiti bazu padatak od prethodno une\u0161enih vrijednosti. - ./manage.py dbshell, ALTER TABLE main_predmet ADD COLUMN \"predmet_nositelj_id\" integer; ::: Upiti Naredba za pokretanje Python shell-a: ./manage.py shell Za definiranje instance klase: >>> profesor=Profesor() >>> predmet=Predmet() Povezivanje instanci Profesor i Predmet pomo\u0107u vanjskog klju\u010da, odnosno dodavanje nositelja na predmet: >>> predmet.predmet_nositelj=profesor Instanci klase student mo\u017eemo dodati n predmeta: >>> student.student_predmeti.add(predmet1, predmet2) Kreiranje instance Zavrsni_rad: >>> zr = Zavrsni_rad() Dodavanje veze One to one, na instancu klase Zavr\u0161ni rad: >>> zr.mentor=profesor >>> zr.student=student Upittza koji vra\u0107a sve instance tra\u017eene klase: profesors = Profesor.objects.all() Pretraga po zadanoj vrijednosti: email = Profesor.objects.get(prof_email=\"prof_mail@uniri.hr\") Pretraga svih instanci koji imaju tra\u017eeno ime: prof_peros = Profesor.objects.filter(prof_ime__contains=\"Pero\") `````` Uzimanje prvih 5 zapisa: Profesor.objects.all()[:5] Sortiranje i dohva\u0107anje prvog u listi: Profesor.objects.order_by('prof_ime')[0] ## Cjelovit kod dana\u0161njih vje\u017ebi ```python from django.db import models from django.utils import timezone # Create your models here. class Profesor(models.Model): prof_ime = models.CharField(max_length=30) prof_prezime = models.CharField(max_length=30) prof_email = models.EmailField() def __str__(self): return self.prof_email class Predmet(models.Model): predmet_naslov = models.CharField(max_length=100) predmet_sadrzaj = models.TextField() predmet_vrijeme_objave = models.DateTimeField(default=timezone.now) predmet_nositelj = models.ForeignKey(Profesor, default=1, on_delete=models.CASCADE) def __str__(self): return self.predmet_naslov class Student(models.Model): student_ime = models.CharField(max_length=25) student_prezime = models.CharField(max_length=50) student_broj_xice = models.CharField(max_length=10) student_predmeti = models.ManyToManyField(Predmet) def __str__(self): return self.student_broj_xice class Zavrsni_rad(models.Model): mentor = models.OneToOneField( Profesor, on_delete=models.CASCADE, ) student = models.OneToOneField( Student, on_delete=models.CASCADE, primary_key=True ) rad_naslov = models.CharField(max_length=50) rad_zadatak = models.CharField(max_length=150) rad_prvi_upis = models.BooleanField(default=True) def __str__(self): return \"Zavrsni rad od: %s \" % self.student.student_broj_xice","title":"Vje\u017eba 3"},{"location":"hr/nastava/materijali/python-django-vj3/#vjezbe-3-relacije-meu-modelima-upiti","text":"","title":"Vje\u017ebe 3: Relacije me\u0111u modelima. Upiti"},{"location":"hr/nastava/materijali/python-django-vj3/#tags-dwa2-vjezbe-django-django-modeli-pyhton","text":"","title":"tags: DWA2 Vjezbe Django Django Modeli Pyhton"},{"location":"hr/nastava/materijali/python-django-vj3/#modeli-relacije-meu-modelima","text":"Relacije: Django dokumnetacija - Many to many - One to one - Many to one","title":"Modeli: Relacije me\u0111u modelima"},{"location":"hr/nastava/materijali/python-django-vj3/#many-to-many","text":"Na prethodnim vje\u017ebama stvorili smo model koji sadr\u017eava klasu Predmet, dodajmo sada klasu Student koja \u0107e biti povezana s Predmetom relacijom ManyToMany. :::success Zadatak Model iz Vje\u017ebi2 main/models.py nadopunite tako da stvorite novu klasu Student . Klasa student sadr\u017ei stupce naziva student_ime , student_prezime , student_broj_xice i student_prvi_upis_predmeta . Tipovi podataka neka budu CharField() za student_ime sa max_length na 25 , student_prezime sa max_length na 50 . Vrijednost student_broj_xice postavite na CharField() za student_ime sa max_length na 10 . Dodajte vrijednost student_predmeti koja \u0107e biti povezan s klasom Predmet , tip veze neka bude ManyToMany . Unutar klase Predmet izmijenite vrijednost predmet_vrijeme_objave tako da joj postavite zadanu vrijednost na timezone.now . Nakon kreirane klase pokrenite naredbe makemigrations i migrate . :::spoiler Rje\u0161enje from django.db import models from django.utils import timezone class Predmet ( models . Model ): predmet_naslov = models . CharField ( max_length = 100 ) predmet_sadrzaj = models . TextField () predmet_vrijeme_objave = models . DateTimeField ( default = timezone . now ) def __str__ ( self ): return self . predmet_naslov class Student ( models . Model ): student_ime = models . CharField ( max_length = 25 ) student_prezime = models . CharField ( max_length = 50 ) student_broj_xice = models . CharField ( max_length = 10 ) student_predmeti = models . ManyToManyField ( Predmet ) ::: :::success Zadatak definirajte funkciju __str__() unutar klase Student koja vra\u0107a student_broj_xice . Zatim dodajte klasu Student unutar main/admin.py tako da ona postane vidljiva u admin panelu. :::spoiler Rje\u0161enje #Unutar klase def __str__ ( self ): return self . student_broj_xice #ovaj kod ide u main/admin.py from django.contrib import admin from .models import * model_list = [ Predmet , Student ] admin . site . register ( model_list ) ::: Nakon \u0161to ste nadopunili main/models.py primjenite pripremu i nakon toga migraciju s naredbama makemigrations i migrate . :::info Provjerite radi li vam sve tako da posjetite http://127.0.0.1:8000/admin/ . :::","title":"Many to many"},{"location":"hr/nastava/materijali/python-django-vj3/#many-to-one","text":":::success Zadatak Definirajte klasu Profesor koja sadr\u017ei vrijednosti, prof_ime i prof_prezime koji su CharField duljine 30, zatim definirajte prof_email koji je tipa EmailField . Unutar klase zadajte __str__ funkciju koja vra\u0107a email adresu od profesora. Nakon kreirane klase pokrenite naredbe makemigrations i migrate . :::spoiler Rje\u0161enje class Profesor ( models . Model ): prof_ime = models . CharField ( max_length = 30 ) prof_prezime = models . CharField ( max_length = 30 ) prof_email = models . EmailField () def __str__ ( self ): return self . prof_email ::: :::success Zadatak Izmijenite klasu Predmet tako da joj dodate nositelja, vrijednost nositelj neka bude tip veze One to many. Za definiranje veze koristite ForeignKey . Nakon kreirane klase pokrenite naredbe makemigrations i migrate . :::spoiler Rje\u0161enje class Predmet ( models . Model ): predmet_naslov = models . CharField ( max_length = 100 ) predmet_sadrzaj = models . TextField () predmet_vrijeme_objave = models . DateTimeField ( default = timezone . now ) predmet_nositelj = models . ForeignKey ( Profesor , on_delete = models . CASCADE ) def __str__ ( self ): return self . predmet_naslov :::","title":"Many to one"},{"location":"hr/nastava/materijali/python-django-vj3/#one-to-one","text":"Student i Profesor povezat \u0107emo u klasi Zavrsni_rad, na kojem radi student, dok mu je profesor mentor. Svaki zavr\u0161ni rad ima Studenta koji ga pi\u0161e i profesora koji mu je mentor. Ovo \u0107emo ostvariti One to one vezama. :::success Zadatak Definirajte klasu Zavr\u0161ni_rad . Zavrsni_rad neka ima zadanog nositelja mentor koji je povezan sa Profesor pomo\u0107u OneToOne veze, dodatni parametar koje zadajete u definiciji veze je primary_key=True . Klasu Zavr\u0161ni_rad zatim pove\u017eite sa Student , tip veze neka bude One-to-one , dodatni parametri koje zadajete su on_delete=models.CASCADE i primary_key=True . Zatim dodajte vrijednosti rad_naslov i rad_zadatak koji su CharField duljine 25 i 50 i bool vrijednost rad_prvi_upis koja po defaultu ima vrijednost True . Nakon kreirane klase pokrenite naredbe makemigrations i migrate . :::spoiler Rje\u0161enje class Zavrsni_rad ( models . Model ): mentor = models . OneToOneField ( Profesor , on_delete = models . CASCADE , ) student = models . OneToOneField ( Student , on_delete = models . CASCADE , primary_key = True , ) rad_naslov = models . CharField ( max_length = 50 ) rad_zadatak = models . CharField ( max_length = 50 ) rad_prvi_upis = models . BooleanField ( default = True ) ::: :::success Zadatak Definirajte funkciju __str__() unutar klase Zavr\u0161ni_rad koja vra\u0107a student_broj_xice . Zatim dodajte klasu Zavr\u0161ni rad unutar main/admin.py tako da ona postane vidljiva u admin panelu. :::spoiler Rje\u0161enje #Unutar klase Zavrsni_rad ovo dopunjavamo def __str__ ( self ): return \"Zavrsni rad od: %s \" % self . student . student_broj_xice #u admin.py samo dopunite model_list model_list = [ Predmet , Student , Zavrsni_rad ] ::: :::info manage.py - Nakon svake novo stvorene klase u modelu pokrenite naredbe makemigrations i migrate . - ./manage.py flush koristite za o\u010distiti bazu padatak od prethodno une\u0161enih vrijednosti. - ./manage.py dbshell, ALTER TABLE main_predmet ADD COLUMN \"predmet_nositelj_id\" integer; :::","title":"One to one"},{"location":"hr/nastava/materijali/python-django-vj3/#upiti","text":"Naredba za pokretanje Python shell-a: ./manage.py shell Za definiranje instance klase: >>> profesor=Profesor() >>> predmet=Predmet() Povezivanje instanci Profesor i Predmet pomo\u0107u vanjskog klju\u010da, odnosno dodavanje nositelja na predmet: >>> predmet.predmet_nositelj=profesor Instanci klase student mo\u017eemo dodati n predmeta: >>> student.student_predmeti.add(predmet1, predmet2) Kreiranje instance Zavrsni_rad: >>> zr = Zavrsni_rad() Dodavanje veze One to one, na instancu klase Zavr\u0161ni rad: >>> zr.mentor=profesor >>> zr.student=student Upittza koji vra\u0107a sve instance tra\u017eene klase: profesors = Profesor.objects.all() Pretraga po zadanoj vrijednosti: email = Profesor.objects.get(prof_email=\"prof_mail@uniri.hr\") Pretraga svih instanci koji imaju tra\u017eeno ime: prof_peros = Profesor.objects.filter(prof_ime__contains=\"Pero\") `````` Uzimanje prvih 5 zapisa: Profesor.objects.all()[:5] Sortiranje i dohva\u0107anje prvog u listi: Profesor.objects.order_by('prof_ime')[0] ## Cjelovit kod dana\u0161njih vje\u017ebi ```python from django.db import models from django.utils import timezone # Create your models here. class Profesor(models.Model): prof_ime = models.CharField(max_length=30) prof_prezime = models.CharField(max_length=30) prof_email = models.EmailField() def __str__(self): return self.prof_email class Predmet(models.Model): predmet_naslov = models.CharField(max_length=100) predmet_sadrzaj = models.TextField() predmet_vrijeme_objave = models.DateTimeField(default=timezone.now) predmet_nositelj = models.ForeignKey(Profesor, default=1, on_delete=models.CASCADE) def __str__(self): return self.predmet_naslov class Student(models.Model): student_ime = models.CharField(max_length=25) student_prezime = models.CharField(max_length=50) student_broj_xice = models.CharField(max_length=10) student_predmeti = models.ManyToManyField(Predmet) def __str__(self): return self.student_broj_xice class Zavrsni_rad(models.Model): mentor = models.OneToOneField( Profesor, on_delete=models.CASCADE, ) student = models.OneToOneField( Student, on_delete=models.CASCADE, primary_key=True ) rad_naslov = models.CharField(max_length=50) rad_zadatak = models.CharField(max_length=150) rad_prvi_upis = models.BooleanField(default=True) def __str__(self): return \"Zavrsni rad od: %s \" % self.student.student_broj_xice","title":"Upiti"},{"location":"hr/nastava/materijali/python-django-vj4/","text":"Vje\u017ebe 4: Usmjeravanje i URL-i. Stvaranje pogleda kao odgovora na HTTP zahtjeve tags: DWA2 Vjezbe Django Pyhton HTTP zahtjevi URL Na dana\u0161njim vje\u017ebama \u010deka nas gradivo vezano za usmjeravanje pomo\u0107u URL'ova. Zatim \u0107emo vidjeti par primjera kako se izgleda odgovor na poslani HTTP zahtjev Usmjeravanje pomo\u0107u /urls.py Potrebno je prvo stvoriti novi projekt i unutar njega aplikaciju koju \u0107emo povezati. Za kreiranje projekta koristi se naredba: django-admin startproject <prject_name> Za kreiranje aplikacije unutar projekta koristi se naredba: django-admin startapp <app_name> Nakon \u0161to su projekt i aplikacija unutar njega kreirani, potrebno ih je povezati. Ovo se radi unutar datoteka ./urls.py koja se nalazi u projektnom folderu. Na ovim vje\u017ebama kreirati \u0107e se projekt naziva vj4 unutar kojeg je stvorena aplikacija naziva main . :::success Zadatak Pove\u017eite kreiranu aplikaciju main s glavnim djelom aplikacije unutar ./urls.py . :::spoiler Rje\u0161enje from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( \"main/\" , include ( 'main.urls' )), ] ::: :::warning Napomena Potrebno je povezati novostvorenu aplikaciju main i unutar setting.py . Unutar INSTALLED_APPS potrebno je dodati MainConfig iz apps.py koja se nalazi unutar main aplikacije. ::: Program smo usmjerili na ./main/urls.py koji trenutno ne postoji. Iz toga razloga, potrebno ga je stvoriti. :::success Zadatak Stvorite datoteku ./main/urls.py . Odmah importajte sve iz filea views.py i neka ime aplikacije bude zadano na app_name = 'main' . Zatim definirajte uzorak URL-a neka upu\u0107uje na homepage , odnosno na funkciju unutar ./main/views.py koja se zove homepage . :::spoiler Rje\u0161enje from django.urls import path from . import views app_name = 'main' urlpatterns = [ path ( \"homepage\" , views . homepage , name = \"homepage\" ), ] ::: Definirali smo poveznice unutar url fileova. Sada je potrebno kreirati funkciju homepage unutar ./main/views.py koju smo pozvali unutar ./main/urls.py . Slanje zahtjeva :::success Zadatak Definirajte funkciju homepage unutar ./main/views.py koja \u0107e vra\u0107ati Http odgovor na zahtjev. Za vra\u0107anje Http odgovora koristite funkciju HttpResponse koju uvozite sa from django.http import HttpResponse . :::spoiler Rje\u0161enje from django.shortcuts import render from django.http import HttpResponse # Create your views here. def homepage ( request ): return HttpResponse ( \"<strong> Homepage </strong> jos neki tekst na homepage\" ) ::: :::info Pohranite sve promjene i pokrenite server. ::: :::success Zadatak Difinirajte funkciju current_datetime unutar ./main/views.py koja \u0107e vra\u0107ati Http odgovor na zahtjev. Neka vrijednost koju funkcija vra\u0107a budu datum i trenutno vrijeme. :::spoiler Rje\u0161enje from django.shortcuts import render from django.http import HttpResponse import datetime # Create your views here. def current_datetime ( request ): now = datetime . datetime . now () html = \"<html><body>Trenutno vrijeme: %s .</body></html>\" % now return HttpResponse ( html ) ::: Vra\u0107ajne gre\u0161aka na zahtjeve :::success Zadatak Definirajte funkciju unutar views.py , funkcija not_found neka vra\u0107a HttpResponseNotFound . Vratite proizvoljni odgovor. :::spoiler Rje\u0161enje from django.http import HttpResponse , HttpResponseNotFound def not_found ( request ): return HttpResponseNotFound ( '<h1>Page not found</h1>' ) ::: Vra\u0107anje zapisa iz baze U nastavku je prikazano kako se mogu dohva\u0107ati vrijednosti iz baze podataka i kako ih mo\u017eemo prikazivati na stranici. :::success Zadatak Kreirajte klasu Student , neka sadr\u017ei, ime prezime i broj xice kao atribute. Dodajte ju zatim unutar admin.py da bi se mogle unositi vrijednosti. Za kraj pokrenite naredbe za migraciju da se kreira baza. :::spoiler Rje\u0161enje #unutar models.py class Student ( models . Model ): ime = models . CharField ( max_length = 25 ) prezime = models . CharField ( max_length = 50 ) broj_xice = models . CharField ( max_length = 10 ) def __str__ ( self ): return str ( self . broj_xice ) ### unutar admin.py from django.contrib import admin from main.models import * # Register your models here. admin . site . register ( Student ) ::: Nakon \u0161to je baza pomo\u0107u modela kreirana, potrebno je unijeti u nju vrijednosti da se mo\u017ee izvr\u0161iti tra\u017eene upite. :::success Zadatak Kreirajte administratora i dodajte u bazu podataka 5 studenata. Od 5 studenata, 3 neka imaju isto ime. Primjerice: Marko, Marko, Marko, Ivan i Ana. Prezime i broj xice, proizvoljno zadajte. ::: Kada smo popunili bazu, idemo kreirati i upite. :::success Zadatak Definirajte funkciju koja u bazi pronalazi sve studente zadanog imena, listu prona\u0111enih imena proslijedite funkciji render . Proslije\u0111ena rje\u0161enja neka se prikazuju unutar students.html . Za po\u010detak, neka va\u0161a funkcija vra\u0107a render(request, 'students.html', context=context) . A students.html \u0107emo definirati u nastavku rje\u0161avanja ovoga zadatka. :::spoiler Rje\u0161enje def all_peros ( request ): peros = Student . objects . filter ( ime__contains = \"pero\" ) context = { 'peros' : peros } return render ( request , 'students.html' , context = context ) ::: Za prikaz rje\u0161enja prethodnog zadatka, potreban nam je html file, koji \u0107e prikazati rezultate upita nad bazom. Kreirajte unutar main foldera datoteku ./main/templates , unutar koje pohranjujete students.html . :::info students.html < ul > {% for p in peros %} < li > Ime: {{ p.ime }} < br > Prezime: {{ p.prezime }} < br > Broj xice:{{ p.broj_xice }} </ li > < br > {% endfor %} </ ul > ::: :::success Dodajte unutar ./main/urls.py putanju koja nas vodi na prethodno kreiranu funkciju i zatim provjerite prikaz rezultata na serveru. ::: Idemo jo\u0161 prikazati ukupan broj studenata u na\u0161oj bazi. Ovaj broj \u0107emo zatim proslijediti funkciji render koja \u0107e ispisati ukupan broj studenata u za to kreiranom html-u. :::success Zadatak Definirajte funkciju koja u bazi pronalazi ukupan broj studenata, broj studenata funkciji render . Proslije\u0111ena rje\u0161enja neka se prikazuju unutar index.html . Dodajte gre\u0161ku u slu\u010daju da Student u bazi nije prona\u0111en. :::spoiler Rje\u0161enje python def detail ( request ): try : num_students = Student . objects . all () . count () context = { 'num_students' : num_students } except Student . DoesNotExist : raise Http404 ( \"Student does not exist\" ) return render ( request , 'detail.html' , context = context ) {% block content %} < h1 > Dobrodosli na UNIRI </ h1 > < p > Na faxu je upisano: </ p > < ul > < li >< strong > Studenata: </ strong > {{ num_students }} </ li > </ ul > {% endblock %} :::","title":"Vje\u017eba 4"},{"location":"hr/nastava/materijali/python-django-vj4/#vjezbe-4-usmjeravanje-i-url-i-stvaranje-pogleda-kao-odgovora-na-http-zahtjeve","text":"","title":"Vje\u017ebe 4: Usmjeravanje i URL-i. Stvaranje pogleda kao odgovora na HTTP zahtjeve"},{"location":"hr/nastava/materijali/python-django-vj4/#tags-dwa2-vjezbe-django-pyhton-http-zahtjevi-url","text":"Na dana\u0161njim vje\u017ebama \u010deka nas gradivo vezano za usmjeravanje pomo\u0107u URL'ova. Zatim \u0107emo vidjeti par primjera kako se izgleda odgovor na poslani HTTP zahtjev","title":"tags: DWA2 Vjezbe Django Pyhton HTTP zahtjevi URL"},{"location":"hr/nastava/materijali/python-django-vj4/#usmjeravanje-pomocu-urlspy","text":"Potrebno je prvo stvoriti novi projekt i unutar njega aplikaciju koju \u0107emo povezati. Za kreiranje projekta koristi se naredba: django-admin startproject <prject_name> Za kreiranje aplikacije unutar projekta koristi se naredba: django-admin startapp <app_name> Nakon \u0161to su projekt i aplikacija unutar njega kreirani, potrebno ih je povezati. Ovo se radi unutar datoteka ./urls.py koja se nalazi u projektnom folderu. Na ovim vje\u017ebama kreirati \u0107e se projekt naziva vj4 unutar kojeg je stvorena aplikacija naziva main . :::success Zadatak Pove\u017eite kreiranu aplikaciju main s glavnim djelom aplikacije unutar ./urls.py . :::spoiler Rje\u0161enje from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( \"main/\" , include ( 'main.urls' )), ] ::: :::warning Napomena Potrebno je povezati novostvorenu aplikaciju main i unutar setting.py . Unutar INSTALLED_APPS potrebno je dodati MainConfig iz apps.py koja se nalazi unutar main aplikacije. ::: Program smo usmjerili na ./main/urls.py koji trenutno ne postoji. Iz toga razloga, potrebno ga je stvoriti. :::success Zadatak Stvorite datoteku ./main/urls.py . Odmah importajte sve iz filea views.py i neka ime aplikacije bude zadano na app_name = 'main' . Zatim definirajte uzorak URL-a neka upu\u0107uje na homepage , odnosno na funkciju unutar ./main/views.py koja se zove homepage . :::spoiler Rje\u0161enje from django.urls import path from . import views app_name = 'main' urlpatterns = [ path ( \"homepage\" , views . homepage , name = \"homepage\" ), ] ::: Definirali smo poveznice unutar url fileova. Sada je potrebno kreirati funkciju homepage unutar ./main/views.py koju smo pozvali unutar ./main/urls.py .","title":"Usmjeravanje pomo\u0107u /urls.py"},{"location":"hr/nastava/materijali/python-django-vj4/#slanje-zahtjeva","text":":::success Zadatak Definirajte funkciju homepage unutar ./main/views.py koja \u0107e vra\u0107ati Http odgovor na zahtjev. Za vra\u0107anje Http odgovora koristite funkciju HttpResponse koju uvozite sa from django.http import HttpResponse . :::spoiler Rje\u0161enje from django.shortcuts import render from django.http import HttpResponse # Create your views here. def homepage ( request ): return HttpResponse ( \"<strong> Homepage </strong> jos neki tekst na homepage\" ) ::: :::info Pohranite sve promjene i pokrenite server. ::: :::success Zadatak Difinirajte funkciju current_datetime unutar ./main/views.py koja \u0107e vra\u0107ati Http odgovor na zahtjev. Neka vrijednost koju funkcija vra\u0107a budu datum i trenutno vrijeme. :::spoiler Rje\u0161enje from django.shortcuts import render from django.http import HttpResponse import datetime # Create your views here. def current_datetime ( request ): now = datetime . datetime . now () html = \"<html><body>Trenutno vrijeme: %s .</body></html>\" % now return HttpResponse ( html ) :::","title":"Slanje zahtjeva"},{"location":"hr/nastava/materijali/python-django-vj4/#vracajne-gresaka-na-zahtjeve","text":":::success Zadatak Definirajte funkciju unutar views.py , funkcija not_found neka vra\u0107a HttpResponseNotFound . Vratite proizvoljni odgovor. :::spoiler Rje\u0161enje from django.http import HttpResponse , HttpResponseNotFound def not_found ( request ): return HttpResponseNotFound ( '<h1>Page not found</h1>' ) :::","title":"Vra\u0107ajne gre\u0161aka na zahtjeve"},{"location":"hr/nastava/materijali/python-django-vj4/#vracanje-zapisa-iz-baze","text":"U nastavku je prikazano kako se mogu dohva\u0107ati vrijednosti iz baze podataka i kako ih mo\u017eemo prikazivati na stranici. :::success Zadatak Kreirajte klasu Student , neka sadr\u017ei, ime prezime i broj xice kao atribute. Dodajte ju zatim unutar admin.py da bi se mogle unositi vrijednosti. Za kraj pokrenite naredbe za migraciju da se kreira baza. :::spoiler Rje\u0161enje #unutar models.py class Student ( models . Model ): ime = models . CharField ( max_length = 25 ) prezime = models . CharField ( max_length = 50 ) broj_xice = models . CharField ( max_length = 10 ) def __str__ ( self ): return str ( self . broj_xice ) ### unutar admin.py from django.contrib import admin from main.models import * # Register your models here. admin . site . register ( Student ) ::: Nakon \u0161to je baza pomo\u0107u modela kreirana, potrebno je unijeti u nju vrijednosti da se mo\u017ee izvr\u0161iti tra\u017eene upite. :::success Zadatak Kreirajte administratora i dodajte u bazu podataka 5 studenata. Od 5 studenata, 3 neka imaju isto ime. Primjerice: Marko, Marko, Marko, Ivan i Ana. Prezime i broj xice, proizvoljno zadajte. ::: Kada smo popunili bazu, idemo kreirati i upite. :::success Zadatak Definirajte funkciju koja u bazi pronalazi sve studente zadanog imena, listu prona\u0111enih imena proslijedite funkciji render . Proslije\u0111ena rje\u0161enja neka se prikazuju unutar students.html . Za po\u010detak, neka va\u0161a funkcija vra\u0107a render(request, 'students.html', context=context) . A students.html \u0107emo definirati u nastavku rje\u0161avanja ovoga zadatka. :::spoiler Rje\u0161enje def all_peros ( request ): peros = Student . objects . filter ( ime__contains = \"pero\" ) context = { 'peros' : peros } return render ( request , 'students.html' , context = context ) ::: Za prikaz rje\u0161enja prethodnog zadatka, potreban nam je html file, koji \u0107e prikazati rezultate upita nad bazom. Kreirajte unutar main foldera datoteku ./main/templates , unutar koje pohranjujete students.html . :::info students.html < ul > {% for p in peros %} < li > Ime: {{ p.ime }} < br > Prezime: {{ p.prezime }} < br > Broj xice:{{ p.broj_xice }} </ li > < br > {% endfor %} </ ul > ::: :::success Dodajte unutar ./main/urls.py putanju koja nas vodi na prethodno kreiranu funkciju i zatim provjerite prikaz rezultata na serveru. ::: Idemo jo\u0161 prikazati ukupan broj studenata u na\u0161oj bazi. Ovaj broj \u0107emo zatim proslijediti funkciji render koja \u0107e ispisati ukupan broj studenata u za to kreiranom html-u. :::success Zadatak Definirajte funkciju koja u bazi pronalazi ukupan broj studenata, broj studenata funkciji render . Proslije\u0111ena rje\u0161enja neka se prikazuju unutar index.html . Dodajte gre\u0161ku u slu\u010daju da Student u bazi nije prona\u0111en. :::spoiler Rje\u0161enje python def detail ( request ): try : num_students = Student . objects . all () . count () context = { 'num_students' : num_students } except Student . DoesNotExist : raise Http404 ( \"Student does not exist\" ) return render ( request , 'detail.html' , context = context ) {% block content %} < h1 > Dobrodosli na UNIRI </ h1 > < p > Na faxu je upisano: </ p > < ul > < li >< strong > Studenata: </ strong > {{ num_students }} </ li > </ ul > {% endblock %} :::","title":"Vra\u0107anje zapisa iz baze"},{"location":"hr/nastava/materijali/python-django-vj5/","text":"Vje\u017ebe 5: Generi\u010dki pogledi tags: DWA2 Vjezbe Django Pyhton Generi\u010dki pregledi Na dana\u0161njim vje\u017ebama radit \u0107e se generi\u010dki pregledi. Priprema i postavljanje projekta Prije po\u010detka rada potrebno je kreirati novi Django projekt vj5 unutar kojeg kreirate aplikaciju main . Pove\u017eite projekt i aplikaciju. : - Dodati main aplikaciju pod INSTALLED_APPS unutar vj5/settings.py . - Unutar vj5/urls.py dodati usmjeravanje na main/urls.py , main/urls.py jo\u0161 nije stvoren, stoga ga je potrebno kreirati. :::info vj5/main/urls.py from django.urls import path urlpatterns = [ ] ::: Za potrebe ovih vje\u017ebi koristit \u0107e se gotov model koji je zadan u nastavku. :::info vj5/main/models.py from django.db import models # Create your models here. class Publisher ( models . Model ): name = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 50 ) city = models . CharField ( max_length = 60 ) state_province = models . CharField ( max_length = 30 ) country = models . CharField ( max_length = 50 ) website = models . URLField () class Meta : ordering = [ \"-name\" ] def __str__ ( self ): return self . name class Author ( models . Model ): salutation = models . CharField ( max_length = 10 ) name = models . CharField ( max_length = 200 ) email = models . EmailField () headshot = models . ImageField ( upload_to = 'author_headshots' ) def __str__ ( self ): return self . name class Book ( models . Model ): title = models . CharField ( max_length = 100 ) authors = models . ManyToManyField ( 'Author' ) publisher = models . ForeignKey ( Publisher , on_delete = models . CASCADE ) publication_date = models . DateField () ::: Nakon \u0161to je model kreiran unutar vj5/main/models.py potrebno je provesti migraciju. Naredbe za migraciju su: $ ./manage.py makemigrations $ ./manage.py migrate :::info Napravite migraciju i zatim pokrenite server ::: Generi\u010dki pogledi Kreirajte prvi generi\u010dki pogled nad stvorenim modelom. :::info vj5/main/views.py from django.views.generic import ListView from main.models import Publisher class PublisherList ( ListView ): model = Publisher ::: A zatim ga pove\u017eite unutar main/urls.py :::info vj5/main/urls.py from django.urls import path from main.views import PublisherList urlpatterns = [ path ( 'publishers/' , PublisherList . as_view ()), ] ::: Kada smo kreirali pogled i pozvali ga unutar urls.py potreban nam je predlo\u017eak unutar kojeg \u0107e se prikazati odgovor. Sve predlo\u0161ke koje \u0107emo koristiti organizirat \u0107emo tako da se nalaze u zajedni\u010dkom direktoriju tempaltes , koji se nalazi u korijenskom direktoriju. Kreirajte ./templates direktorij, unutar kojeg kreirate main direktorij, dakle ./templates/main , a unutar njega kreirajte publisher_list.html , koji sadr\u017eava sljede\u0107i sadr\u017eaj: :::info ./templates/main/publisher_list.html {% block content %} < h2 > Publishers </ h2 > < ul > {% for publisher in object_list %} < li > Name: {{ publisher.name }} < br > City: {{ publisher.city }} </ li > {% endfor %} </ ul > {% endblock %} ::: Potrebno je jo\u0161 zadati putanju za predlo\u0161ke unutar settings.py . Za dodavanje putanje, pod TEMPLATES dodajte putanju do templates direktorija ( ./templates ), odnosno 'DIRS': ['./templates'], . :::success Zadatak Kreirajte administratora i dodajte u bazu podataka 3 izdava\u010da. Sve vrijednosti proizvoljno zadajte. ::: :::info Provjerite ispis izdava\u010da koji su dodani u bazu na 127.0.0.1/main/publishers ::: Dinami\u010dko filtriranje U nastavku je prikazan na\u010din na koji se omogu\u0107ava dinami\u010dka pretraga pomo\u0107u URL-a. Za zadani naziv izdava\u010da vra\u0107at \u0107e se sve knjige koje je taj izdava\u010d objavio. U zadanom URL uzorku u aplikaciji ne\u0107e stati\u010dno biti definirati naziv, nego \u0107e se on dinami\u010dno generirati. Za po\u010detak potrebno je definirati prikaz unutar ./main/views.py koji \u0107e vra\u0107ati sve knjige od zadanog izdava\u010da. :::info vj5/main/views.py from django.shortcuts import get_object_or_404 from django.views.generic import ListView from main.models import Book , Publisher class PublisherBookList ( ListView ): template_name = 'main/books_by_publisher.html' def get_queryset ( self ): self . publisher = get_object_or_404 ( Publisher , name = self . kwargs [ 'publisher' ]) return Book . objects . filter ( publisher = self . publisher ) ::: Zatim unutar ./main/urls.py povezujemo s tra\u017eenim pogledom. U ovom slu\u010daju ne koristi se stati\u010dno zadani uzorak Umjesto da svakog pojedinog izdava\u010da zadajemo pojedina\u010dno, koristimo <publisher> . :::info vj5/main/urls.py from django.urls import path from main.views import PublisherList , PublisherBookList urlpatterns = [ path ( 'publishers/' , PublisherList . as_view ()), path ( '<publisher>/' , PublisherBookList . as_view ()), ] ::: I za zadnji dio potrebno je kreirati prikaz unutar ./templates koji \u0107e nam prikazivati rezultate pretrage za zadanog izdava\u010da. :::success Zadatak Kreirajte books_by_publisher.html unutar ./templates/main koji \u0107e ispisati sve knjige od tra\u017eenog izdava\u010da. Neka se ispisuje samo naslov svake knjige. :::spoiler Rje\u0161enje {% block content %} < h2 > Books list: </ h2 > < ul > {% for book in object_list %} < li > Book title: {{ book.title }} </ li >< br > {% endfor %} </ ul > {% endblock %} ::: :::info Pokrenite server i provjerite pretra\u017eivanje po izdava\u010du. :::","title":"Vje\u017eba 5"},{"location":"hr/nastava/materijali/python-django-vj5/#vjezbe-5-genericki-pogledi","text":"","title":"Vje\u017ebe 5: Generi\u010dki pogledi"},{"location":"hr/nastava/materijali/python-django-vj5/#tags-dwa2-vjezbe-django-pyhton-genericki-pregledi","text":"Na dana\u0161njim vje\u017ebama radit \u0107e se generi\u010dki pregledi.","title":"tags: DWA2 Vjezbe Django Pyhton Generi\u010dki pregledi"},{"location":"hr/nastava/materijali/python-django-vj5/#priprema-i-postavljanje-projekta","text":"Prije po\u010detka rada potrebno je kreirati novi Django projekt vj5 unutar kojeg kreirate aplikaciju main . Pove\u017eite projekt i aplikaciju. : - Dodati main aplikaciju pod INSTALLED_APPS unutar vj5/settings.py . - Unutar vj5/urls.py dodati usmjeravanje na main/urls.py , main/urls.py jo\u0161 nije stvoren, stoga ga je potrebno kreirati. :::info vj5/main/urls.py from django.urls import path urlpatterns = [ ] ::: Za potrebe ovih vje\u017ebi koristit \u0107e se gotov model koji je zadan u nastavku. :::info vj5/main/models.py from django.db import models # Create your models here. class Publisher ( models . Model ): name = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 50 ) city = models . CharField ( max_length = 60 ) state_province = models . CharField ( max_length = 30 ) country = models . CharField ( max_length = 50 ) website = models . URLField () class Meta : ordering = [ \"-name\" ] def __str__ ( self ): return self . name class Author ( models . Model ): salutation = models . CharField ( max_length = 10 ) name = models . CharField ( max_length = 200 ) email = models . EmailField () headshot = models . ImageField ( upload_to = 'author_headshots' ) def __str__ ( self ): return self . name class Book ( models . Model ): title = models . CharField ( max_length = 100 ) authors = models . ManyToManyField ( 'Author' ) publisher = models . ForeignKey ( Publisher , on_delete = models . CASCADE ) publication_date = models . DateField () ::: Nakon \u0161to je model kreiran unutar vj5/main/models.py potrebno je provesti migraciju. Naredbe za migraciju su: $ ./manage.py makemigrations $ ./manage.py migrate :::info Napravite migraciju i zatim pokrenite server :::","title":"Priprema i postavljanje projekta"},{"location":"hr/nastava/materijali/python-django-vj5/#genericki-pogledi","text":"Kreirajte prvi generi\u010dki pogled nad stvorenim modelom. :::info vj5/main/views.py from django.views.generic import ListView from main.models import Publisher class PublisherList ( ListView ): model = Publisher ::: A zatim ga pove\u017eite unutar main/urls.py :::info vj5/main/urls.py from django.urls import path from main.views import PublisherList urlpatterns = [ path ( 'publishers/' , PublisherList . as_view ()), ] ::: Kada smo kreirali pogled i pozvali ga unutar urls.py potreban nam je predlo\u017eak unutar kojeg \u0107e se prikazati odgovor. Sve predlo\u0161ke koje \u0107emo koristiti organizirat \u0107emo tako da se nalaze u zajedni\u010dkom direktoriju tempaltes , koji se nalazi u korijenskom direktoriju. Kreirajte ./templates direktorij, unutar kojeg kreirate main direktorij, dakle ./templates/main , a unutar njega kreirajte publisher_list.html , koji sadr\u017eava sljede\u0107i sadr\u017eaj: :::info ./templates/main/publisher_list.html {% block content %} < h2 > Publishers </ h2 > < ul > {% for publisher in object_list %} < li > Name: {{ publisher.name }} < br > City: {{ publisher.city }} </ li > {% endfor %} </ ul > {% endblock %} ::: Potrebno je jo\u0161 zadati putanju za predlo\u0161ke unutar settings.py . Za dodavanje putanje, pod TEMPLATES dodajte putanju do templates direktorija ( ./templates ), odnosno 'DIRS': ['./templates'], . :::success Zadatak Kreirajte administratora i dodajte u bazu podataka 3 izdava\u010da. Sve vrijednosti proizvoljno zadajte. ::: :::info Provjerite ispis izdava\u010da koji su dodani u bazu na 127.0.0.1/main/publishers :::","title":"Generi\u010dki pogledi"},{"location":"hr/nastava/materijali/python-django-vj5/#dinamicko-filtriranje","text":"U nastavku je prikazan na\u010din na koji se omogu\u0107ava dinami\u010dka pretraga pomo\u0107u URL-a. Za zadani naziv izdava\u010da vra\u0107at \u0107e se sve knjige koje je taj izdava\u010d objavio. U zadanom URL uzorku u aplikaciji ne\u0107e stati\u010dno biti definirati naziv, nego \u0107e se on dinami\u010dno generirati. Za po\u010detak potrebno je definirati prikaz unutar ./main/views.py koji \u0107e vra\u0107ati sve knjige od zadanog izdava\u010da. :::info vj5/main/views.py from django.shortcuts import get_object_or_404 from django.views.generic import ListView from main.models import Book , Publisher class PublisherBookList ( ListView ): template_name = 'main/books_by_publisher.html' def get_queryset ( self ): self . publisher = get_object_or_404 ( Publisher , name = self . kwargs [ 'publisher' ]) return Book . objects . filter ( publisher = self . publisher ) ::: Zatim unutar ./main/urls.py povezujemo s tra\u017eenim pogledom. U ovom slu\u010daju ne koristi se stati\u010dno zadani uzorak Umjesto da svakog pojedinog izdava\u010da zadajemo pojedina\u010dno, koristimo <publisher> . :::info vj5/main/urls.py from django.urls import path from main.views import PublisherList , PublisherBookList urlpatterns = [ path ( 'publishers/' , PublisherList . as_view ()), path ( '<publisher>/' , PublisherBookList . as_view ()), ] ::: I za zadnji dio potrebno je kreirati prikaz unutar ./templates koji \u0107e nam prikazivati rezultate pretrage za zadanog izdava\u010da. :::success Zadatak Kreirajte books_by_publisher.html unutar ./templates/main koji \u0107e ispisati sve knjige od tra\u017eenog izdava\u010da. Neka se ispisuje samo naslov svake knjige. :::spoiler Rje\u0161enje {% block content %} < h2 > Books list: </ h2 > < ul > {% for book in object_list %} < li > Book title: {{ book.title }} </ li >< br > {% endfor %} </ ul > {% endblock %} ::: :::info Pokrenite server i provjerite pretra\u017eivanje po izdava\u010du. :::","title":"Dinami\u010dko filtriranje"},{"location":"hr/nastava/materijali/python-django-vj6/","text":"Vje\u017ebe 6: Predaja obrazaca HTTP metodama GET i POST. Provjera unosa i prikaz poruka o gre\u0161kama Na dana\u0161njim vje\u017ebama raditi \u0107e se generi\u010dko popunjavanje baze i obrasci. Postavljanje projekta :::success Zadatak: Postavljanje projekta Kreirajte projekt naziva vj6 i unutar njega aplikaciju naziva main . Pove\u017eite aplikaciju sa projektom. Dodati uplikaciju unutar settings.py Dodati putanju main/urls.py unutar urls.py , a zatim kreirati main/urls.py . ::: Generi\u010dko popunjavanje baze podataka Model koji se koristi sadr\u017ei dvije klase, Author i Book . :::info vj6/main/models.py from django.db import models # Create your models here. class Author ( models . Model ): name = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 50 ) city = models . CharField ( max_length = 60 ) country = models . CharField ( max_length = 50 ) def __str__ ( self ): return self . name class Book ( models . Model ): title = models . CharField ( max_length = 100 ) abstract = models . TextField () author = models . ForeignKey ( Author , on_delete = models . CASCADE ) publication_date = models . DateField () def __str__ ( self ): return self . title ::: Kreirani model potrebno je popuniti podacima, za to \u0107e se koristiti naredba ./manage.py setup_test_data.py . Prilikom pokretanja naredbe, program vra\u0107a gre\u0161ku jer naredba jo\u0161 nije kreirana. Instalacija potrebnih Python paketa: pip3 install factory_boy Kada je instaliran modul, potrebno je kreirati klase koje \u0107e automatski popunjavati bazu sa tzv. dummy data , odnostno nasumi\u010dno generiranim podacima koji \u0107e nam pojednostaviti proces popunjavanja baze nad kojom \u017eelimo izvr\u0161avati upite. Detaljnije o funkcionalnosti mo\u017eete prona\u0107i u factory_boy dokumnetaciji . :::success Zadatak Unutar ./vj6/main kreirajte factory.py ::: Kreirani vj6/main/factory.py koristiti \u0107e kao predlo\u017eak za popunjavanje modela definiranog unutar vj6/main/models.py . Primjetit \u0107ete sli\u010dnost u stilu pisanja klasa. Dakle, potrebno je definirati klase, sukladno klasama koje su definirane unutar vj6/main/models.py . :::info vj6/main/factory.py # factories.py import factory from factory.django import DjangoModelFactory from main.models import * # Defining a factory class AuthorFactory ( DjangoModelFactory ): class Meta : model = Author name = factory . Faker ( \"first_name\" ) address = factory . Faker ( \"address\" ) city = factory . Faker ( \"city\" ) country = factory . Faker ( \"country\" ) class BookFactory ( DjangoModelFactory ): class Meta : model = Book title = factory . Faker ( \"sentence\" , nb_words = 4 ) abstract = factory . Faker ( \"sentence\" , nb_words = 50 ) author = factory . Iterator ( Author . objects . all ()) publication_date = factory . Faker ( \"date_time\" ) ::: :::success Zadatak Nakon \u0161to su klase definirane unutar factory.py , isprobajte njihovu funkcionalnost. Prije pokretanja shell-a primjenite migraciju na bazu. ::: $ ./manage.py shell >>> from main.factories import * >>> a = AuthorFactory() >>> b = BookFactory() >>> a >>> b.title >>> b.author :::success Zadatak Kreirajte administratnora, zatim unutar admin.py registrirajte modele Book i Author . Provjerite ako su podaci generirani sa factory.py uneseni u bazu. :::spoiler #admin.py from django.contrib import admin from main.models import * models_list = [ Author , Book ] # Register your models here. admin . site . register ( models_list ) ::: manage.py : kreiranje naredbe Kada je kreiran i testiran factory.py , slijedi kreiranje naredbe koja \u0107e se proslje\u0111ivati ./manage.py . Za po\u010detak porenite naredbu: ./manage.py Izlistao nam se trenutni popis opcija koje mo\u017eemo izvr\u0161avati. Kreirajte direktorij commands , unutar kojeg \u0107e se nalaziti skripta. Zatim se pozicionirajte u njega. $ mkdir main/management/commands $ cd main/management/commands A zatim, unutar direktorija commands kreirajte setup_test_data.py . $ touch setup_test_data.py Otvorite kreirani setup_test_data.py unutar kojeg \u0107e se kreirati vlastita upravlja\u010dka naredba. Detaljnije o upravlja\u010dkim komandama koje su kreirane od strane korisnika. :::info main/management/commands/setup_test_data.py import random from django.db import transaction from django.core.management.base import BaseCommand from main.models import Author , Book from main.factories import ( AuthorFactory , BookFactory ) NUM_AUTHORS = 10 NUM_BOOKS = 100 class Command ( BaseCommand ): help = \"Generates test data\" @transaction . atomic def handle ( self , * args , ** kwargs ): self . stdout . write ( \"Deleting old data...\" ) models = [ Author , Book ] for m in models : m . objects . all () . delete () self . stdout . write ( \"Creating new data...\" ) for _ in range ( NUM_AUTHORS ): author = AuthorFactory () for _ in range ( NUM_BOOKS ): book = BookFactory () ::: Svojstvo funkcije handle je postavljeno na transaction.atomic , \u0161to ozna\u010dava da ako je blok koda uspje\u0161no izvr\u0161en, promjene se pohranjuju u bazu podataka. Detaljnije obja\u0161njenje o transaction kori\u0161tenom u prethodnom primjeru. :::success Zadatak Isprobajte funkcionalnost kreirane naredbe, a zatim provjerite ako su uneseni podaci unutar admin su\u010delja.. ::: $ ./manage.py setup_test_data Predlo\u0161ci Nakon \u0161to je baza kreirana i popunjena teestim podacima, sljede\u0107i korak je definiranje predlo\u017eaka pomo\u0107u kojih \u0107e se ti podaci prikazivati. Sintaksa Varijable Pomo\u0107u varijabli ispisujemo sadr\u017eaj koji je proslje\u0111en iz konteksta. Objekt je sli\u010dan Python rije\u010dniku ( eng. dictionary ) gdje je sadr\u017eaj mapiran u odnosu key-value . Varijable pi\u0161emo unutar viti\u010dastih zagrada {{ varijabla }} : Ime: {{ first_name }}, Prezime: {{ last_name }}. \u0160to \u0107e iz konteksta {'first_name': 'Ivo', 'last_name': 'Ivi\u0107'} biti prikazano kao: Ime: Ivo, Prezime: Ivi\u0107. Oznake Oznake se pi\u0161u unutar {% oznaka %} . Ozna\u010davaju proizvoljnu logiku unutar prikaza. Oznaka mo\u017ee biti ispis sadr\u017eaja, ili logi\u010dka cjelina ili pak pristup drugim oznakama iz predlo\u0161ka, Primjerice: {% tag %} ... sadr\u017eaj ... {% endtag %} ili {% block title %}{{ object.title }}{% endblock %} Filteri Filtere koristimo da bi transformirali vrijednosti varijabli. Neki od primjera kori\u0161tenja filtera mogu biti za: - Pretvaranje u mala slova: {{ name|lower }} - Uzimanje prvih 30 rije\u010di: {{ bio|truncatewords:30 }} - Dohva\u0107anje duljine varijable: {{ value|length }} Komentari Za komentiranje djelova koristimo # \u0161to unutar predlo\u0161ka izgleda: {# Ovo ne\u0107e biti prikazano #} Petlje Petlje se pi\u0161u unutar {% %} odnosno definiraju se njihove oznake. Primjer kori\u0161tenja for petlje: <ul> {% for author in author_list %} <li>{{ author.name }}</li> {% endfor %} </ul> Primjer autentifikacije korisnika sa if petljom: {% if user.is_authenticated %}Hello, {{ user.username }}.{% endif %} Primjer if else petlje: {% if author_list %} Number of athletes: {{ athlete_list|length }} {% else %} No authors. {% endif %} :::success Kreirajte ./templates unutar kojeg \u0107e biti pohranjeni predlo\u0161ci koji se koriste. Ne zaboravite definirati putanju unutar settings.py . base_generic.html ::: :::info ./templates/base_generic.html <!DOCTYPE html> < html lang = \"en\" > < head > </ head > < body > < h1 > My library </ h1 > < div id = \"sidebar\" > {% block sidebar %} < ul > < li >< a href = \"/main\" > Home </ a ></ li > < li >< a href = \"/main/books\" > Books </ a ></ li > < li >< a href = \"/main/authors\" > Authors </ a ></ li > </ ul > {% endblock %} </ div > < div class = \"content\" > {% block content %} {% endblock %} </ div > </ body > </ html > ::: Naslje\u0111ivanje u predlo\u0161cima :::info ./template/main/book_list.html {% extends \"base_generic.html\" %} {% block content %} < br > < h2 > Books </ h2 > < br > {% for book in book_list %} < div class = \"book\" > < h4 > {{ book.title }} </ h4 > Author: {{book.author}} < p > {{ book.abstract }} </ p > </ div > {% endfor %} {% endblock %} ::: Unutar main/urls.py . path(\"books\", BookList.as_view()) :::info main/views.py from django.shortcuts import get_object_or_404 from django.views.generic import ListView from main.models import Author , Book class BookList ( ListView ): model = Book ::: :::success Zadatak Sukladno prethodnom primjeru kreirajte prikaz za sve autore unutar baze. ::: CSS Dodavanje css-a u html template. Uvoz < link rel = \"stylesheet\" href = \"https://www.w3schools.com/html/styles.css\" > < head > < link rel = \"stylesheet\" href = \"https://www.w3schools.com/html/styles.css\" > < title > {% block title %}Knjiznica{% endblock %} </ title > </ head > Static css Unutar main aplikacije potrebno je stvoriti direktorij static a unutar njega style.css . Referenciranje na style.css unutar uplikacije: {% load static %} < link rel = \"stylesheet\" type = \"text/css\" href = \"{% static 'style.css' %}\" > Prikaz unutar HTML templatea: < head > {% load static %} < link rel = \"stylesheet\" type = \"text/css\" href = \"{% static 'style.css' %}\" > < title > {% block title %}Knjiznica{% endblock %} </ title > </ head > :::info style.css mo\u017eete proizvoljno zadati i prilago\u0111avati vlastitim \u017eeljama. ::: :::info main/static/style.css h1 { color : blue ; text-align : center ; } h2 { text-align : center ; } li { list-style-type : none ; float : left ; } li a { padding : 16 px ; } ::: :::success Zadatak Dopunite prikaz na autora tako da njegovo ime bude link. Link neka vodi na prikaz svih knjiga od odabranog autora. ::: Prvo je potrebno kreirati pretra\u017eivanje po tra\u017eenom autoru, a zatim vratiti sve knjige koje su prona\u0111ene za trra\u017eenog autora. :::info main/views.py from django.shortcuts import get_object_or_404 from django.views.generic import ListView from main.models import Author , Book class AuthorBookList ( ListView ): template_name = 'main/book_list.html' def get_queryset ( self ): self . author = get_object_or_404 ( Author , name = self . kwargs [ 'author' ]) return Book . objects . filter ( author = self . author ) ::: Potrebno je dodati putanju unutar views.py . :::info main/views.py path ( \"<author>\" , AuthorBookList . as_view ()) ::: Zatim je potrebno izmjeniti predlo\u017eak, odnosno dodati linkvoe koji vode na autore. :::info author_list.html {% extends \"base_generic.html\" %} {% block content %} < br > < h2 > Books </ h2 > < br > {% for book in book_list %} < div class = \"book\" > < h4 > {{ book.title }} </ h4 > Author: < a href = \"{{book.author}}\" > {{book.author}} </ a > < p > {{ book.abstract }} </ p > </ div > {% endfor %} {% endblock %} ::: Izmjenimo i predlo\u017eak za prikaz knjiga. :::info book_list.html {% extends \"base_generic.html\" %} {% block content %} < br > < h2 > Authors </ h2 > < br > {% for author in author_list %} < div class = \"author\" > < h4 > {{author.name}} </ h4 > City: {{author.city}} < br > Country: {{author.country}} < br > < a href = \"{{author.name}}\" > All books by {{author.name}} </ a > </ div > {% endfor %} {% endblock %} ::: Dopunite style.css tako da dodate obrub na elemente Knjige i Autora. . book { border-color : cyan ; border-style : double ; padding-left : 20 px ; padding-right : 20 px ; padding-bottom : 20 px ; } . author { border-color : olive ; border-style : double ; padding-left : 20 px ; padding-right : 20 px ; padding-bottom : 20 px ; }","title":"Vje\u017eba 6"},{"location":"hr/nastava/materijali/python-django-vj6/#vjezbe-6-predaja-obrazaca-http-metodama-get-i-post-provjera-unosa-i-prikaz-poruka-o-greskama","text":"Na dana\u0161njim vje\u017ebama raditi \u0107e se generi\u010dko popunjavanje baze i obrasci.","title":"Vje\u017ebe 6: Predaja obrazaca HTTP metodama GET i POST. Provjera unosa i prikaz poruka o gre\u0161kama"},{"location":"hr/nastava/materijali/python-django-vj6/#postavljanje-projekta","text":":::success Zadatak: Postavljanje projekta Kreirajte projekt naziva vj6 i unutar njega aplikaciju naziva main . Pove\u017eite aplikaciju sa projektom. Dodati uplikaciju unutar settings.py Dodati putanju main/urls.py unutar urls.py , a zatim kreirati main/urls.py . :::","title":"Postavljanje projekta"},{"location":"hr/nastava/materijali/python-django-vj6/#genericko-popunjavanje-baze-podataka","text":"Model koji se koristi sadr\u017ei dvije klase, Author i Book . :::info vj6/main/models.py from django.db import models # Create your models here. class Author ( models . Model ): name = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 50 ) city = models . CharField ( max_length = 60 ) country = models . CharField ( max_length = 50 ) def __str__ ( self ): return self . name class Book ( models . Model ): title = models . CharField ( max_length = 100 ) abstract = models . TextField () author = models . ForeignKey ( Author , on_delete = models . CASCADE ) publication_date = models . DateField () def __str__ ( self ): return self . title ::: Kreirani model potrebno je popuniti podacima, za to \u0107e se koristiti naredba ./manage.py setup_test_data.py . Prilikom pokretanja naredbe, program vra\u0107a gre\u0161ku jer naredba jo\u0161 nije kreirana. Instalacija potrebnih Python paketa: pip3 install factory_boy Kada je instaliran modul, potrebno je kreirati klase koje \u0107e automatski popunjavati bazu sa tzv. dummy data , odnostno nasumi\u010dno generiranim podacima koji \u0107e nam pojednostaviti proces popunjavanja baze nad kojom \u017eelimo izvr\u0161avati upite. Detaljnije o funkcionalnosti mo\u017eete prona\u0107i u factory_boy dokumnetaciji . :::success Zadatak Unutar ./vj6/main kreirajte factory.py ::: Kreirani vj6/main/factory.py koristiti \u0107e kao predlo\u017eak za popunjavanje modela definiranog unutar vj6/main/models.py . Primjetit \u0107ete sli\u010dnost u stilu pisanja klasa. Dakle, potrebno je definirati klase, sukladno klasama koje su definirane unutar vj6/main/models.py . :::info vj6/main/factory.py # factories.py import factory from factory.django import DjangoModelFactory from main.models import * # Defining a factory class AuthorFactory ( DjangoModelFactory ): class Meta : model = Author name = factory . Faker ( \"first_name\" ) address = factory . Faker ( \"address\" ) city = factory . Faker ( \"city\" ) country = factory . Faker ( \"country\" ) class BookFactory ( DjangoModelFactory ): class Meta : model = Book title = factory . Faker ( \"sentence\" , nb_words = 4 ) abstract = factory . Faker ( \"sentence\" , nb_words = 50 ) author = factory . Iterator ( Author . objects . all ()) publication_date = factory . Faker ( \"date_time\" ) ::: :::success Zadatak Nakon \u0161to su klase definirane unutar factory.py , isprobajte njihovu funkcionalnost. Prije pokretanja shell-a primjenite migraciju na bazu. ::: $ ./manage.py shell >>> from main.factories import * >>> a = AuthorFactory() >>> b = BookFactory() >>> a >>> b.title >>> b.author :::success Zadatak Kreirajte administratnora, zatim unutar admin.py registrirajte modele Book i Author . Provjerite ako su podaci generirani sa factory.py uneseni u bazu. :::spoiler #admin.py from django.contrib import admin from main.models import * models_list = [ Author , Book ] # Register your models here. admin . site . register ( models_list ) :::","title":"Generi\u010dko popunjavanje baze podataka"},{"location":"hr/nastava/materijali/python-django-vj6/#managepy-kreiranje-naredbe","text":"Kada je kreiran i testiran factory.py , slijedi kreiranje naredbe koja \u0107e se proslje\u0111ivati ./manage.py . Za po\u010detak porenite naredbu: ./manage.py Izlistao nam se trenutni popis opcija koje mo\u017eemo izvr\u0161avati. Kreirajte direktorij commands , unutar kojeg \u0107e se nalaziti skripta. Zatim se pozicionirajte u njega. $ mkdir main/management/commands $ cd main/management/commands A zatim, unutar direktorija commands kreirajte setup_test_data.py . $ touch setup_test_data.py Otvorite kreirani setup_test_data.py unutar kojeg \u0107e se kreirati vlastita upravlja\u010dka naredba. Detaljnije o upravlja\u010dkim komandama koje su kreirane od strane korisnika. :::info main/management/commands/setup_test_data.py import random from django.db import transaction from django.core.management.base import BaseCommand from main.models import Author , Book from main.factories import ( AuthorFactory , BookFactory ) NUM_AUTHORS = 10 NUM_BOOKS = 100 class Command ( BaseCommand ): help = \"Generates test data\" @transaction . atomic def handle ( self , * args , ** kwargs ): self . stdout . write ( \"Deleting old data...\" ) models = [ Author , Book ] for m in models : m . objects . all () . delete () self . stdout . write ( \"Creating new data...\" ) for _ in range ( NUM_AUTHORS ): author = AuthorFactory () for _ in range ( NUM_BOOKS ): book = BookFactory () ::: Svojstvo funkcije handle je postavljeno na transaction.atomic , \u0161to ozna\u010dava da ako je blok koda uspje\u0161no izvr\u0161en, promjene se pohranjuju u bazu podataka. Detaljnije obja\u0161njenje o transaction kori\u0161tenom u prethodnom primjeru. :::success Zadatak Isprobajte funkcionalnost kreirane naredbe, a zatim provjerite ako su uneseni podaci unutar admin su\u010delja.. ::: $ ./manage.py setup_test_data","title":"manage.py: kreiranje naredbe"},{"location":"hr/nastava/materijali/python-django-vj6/#predlosci","text":"Nakon \u0161to je baza kreirana i popunjena teestim podacima, sljede\u0107i korak je definiranje predlo\u017eaka pomo\u0107u kojih \u0107e se ti podaci prikazivati.","title":"Predlo\u0161ci"},{"location":"hr/nastava/materijali/python-django-vj6/#sintaksa","text":"","title":"Sintaksa"},{"location":"hr/nastava/materijali/python-django-vj6/#varijable","text":"Pomo\u0107u varijabli ispisujemo sadr\u017eaj koji je proslje\u0111en iz konteksta. Objekt je sli\u010dan Python rije\u010dniku ( eng. dictionary ) gdje je sadr\u017eaj mapiran u odnosu key-value . Varijable pi\u0161emo unutar viti\u010dastih zagrada {{ varijabla }} : Ime: {{ first_name }}, Prezime: {{ last_name }}. \u0160to \u0107e iz konteksta {'first_name': 'Ivo', 'last_name': 'Ivi\u0107'} biti prikazano kao: Ime: Ivo, Prezime: Ivi\u0107.","title":"Varijable"},{"location":"hr/nastava/materijali/python-django-vj6/#oznake","text":"Oznake se pi\u0161u unutar {% oznaka %} . Ozna\u010davaju proizvoljnu logiku unutar prikaza. Oznaka mo\u017ee biti ispis sadr\u017eaja, ili logi\u010dka cjelina ili pak pristup drugim oznakama iz predlo\u0161ka, Primjerice: {% tag %} ... sadr\u017eaj ... {% endtag %} ili {% block title %}{{ object.title }}{% endblock %}","title":"Oznake"},{"location":"hr/nastava/materijali/python-django-vj6/#filteri","text":"Filtere koristimo da bi transformirali vrijednosti varijabli. Neki od primjera kori\u0161tenja filtera mogu biti za: - Pretvaranje u mala slova: {{ name|lower }} - Uzimanje prvih 30 rije\u010di: {{ bio|truncatewords:30 }} - Dohva\u0107anje duljine varijable: {{ value|length }}","title":"Filteri"},{"location":"hr/nastava/materijali/python-django-vj6/#komentari","text":"Za komentiranje djelova koristimo # \u0161to unutar predlo\u0161ka izgleda: {# Ovo ne\u0107e biti prikazano #}","title":"Komentari"},{"location":"hr/nastava/materijali/python-django-vj6/#petlje","text":"Petlje se pi\u0161u unutar {% %} odnosno definiraju se njihove oznake. Primjer kori\u0161tenja for petlje: <ul> {% for author in author_list %} <li>{{ author.name }}</li> {% endfor %} </ul> Primjer autentifikacije korisnika sa if petljom: {% if user.is_authenticated %}Hello, {{ user.username }}.{% endif %} Primjer if else petlje: {% if author_list %} Number of athletes: {{ athlete_list|length }} {% else %} No authors. {% endif %} :::success Kreirajte ./templates unutar kojeg \u0107e biti pohranjeni predlo\u0161ci koji se koriste. Ne zaboravite definirati putanju unutar settings.py . base_generic.html ::: :::info ./templates/base_generic.html <!DOCTYPE html> < html lang = \"en\" > < head > </ head > < body > < h1 > My library </ h1 > < div id = \"sidebar\" > {% block sidebar %} < ul > < li >< a href = \"/main\" > Home </ a ></ li > < li >< a href = \"/main/books\" > Books </ a ></ li > < li >< a href = \"/main/authors\" > Authors </ a ></ li > </ ul > {% endblock %} </ div > < div class = \"content\" > {% block content %} {% endblock %} </ div > </ body > </ html > :::","title":"Petlje"},{"location":"hr/nastava/materijali/python-django-vj6/#nasljeivanje-u-predloscima","text":":::info ./template/main/book_list.html {% extends \"base_generic.html\" %} {% block content %} < br > < h2 > Books </ h2 > < br > {% for book in book_list %} < div class = \"book\" > < h4 > {{ book.title }} </ h4 > Author: {{book.author}} < p > {{ book.abstract }} </ p > </ div > {% endfor %} {% endblock %} ::: Unutar main/urls.py . path(\"books\", BookList.as_view()) :::info main/views.py from django.shortcuts import get_object_or_404 from django.views.generic import ListView from main.models import Author , Book class BookList ( ListView ): model = Book ::: :::success Zadatak Sukladno prethodnom primjeru kreirajte prikaz za sve autore unutar baze. :::","title":"Naslje\u0111ivanje u predlo\u0161cima"},{"location":"hr/nastava/materijali/python-django-vj6/#css","text":"Dodavanje css-a u html template.","title":"CSS"},{"location":"hr/nastava/materijali/python-django-vj6/#uvoz","text":"< link rel = \"stylesheet\" href = \"https://www.w3schools.com/html/styles.css\" > < head > < link rel = \"stylesheet\" href = \"https://www.w3schools.com/html/styles.css\" > < title > {% block title %}Knjiznica{% endblock %} </ title > </ head >","title":"Uvoz"},{"location":"hr/nastava/materijali/python-django-vj6/#static-css","text":"Unutar main aplikacije potrebno je stvoriti direktorij static a unutar njega style.css . Referenciranje na style.css unutar uplikacije: {% load static %} < link rel = \"stylesheet\" type = \"text/css\" href = \"{% static 'style.css' %}\" > Prikaz unutar HTML templatea: < head > {% load static %} < link rel = \"stylesheet\" type = \"text/css\" href = \"{% static 'style.css' %}\" > < title > {% block title %}Knjiznica{% endblock %} </ title > </ head > :::info style.css mo\u017eete proizvoljno zadati i prilago\u0111avati vlastitim \u017eeljama. ::: :::info main/static/style.css h1 { color : blue ; text-align : center ; } h2 { text-align : center ; } li { list-style-type : none ; float : left ; } li a { padding : 16 px ; } ::: :::success Zadatak Dopunite prikaz na autora tako da njegovo ime bude link. Link neka vodi na prikaz svih knjiga od odabranog autora. ::: Prvo je potrebno kreirati pretra\u017eivanje po tra\u017eenom autoru, a zatim vratiti sve knjige koje su prona\u0111ene za trra\u017eenog autora. :::info main/views.py from django.shortcuts import get_object_or_404 from django.views.generic import ListView from main.models import Author , Book class AuthorBookList ( ListView ): template_name = 'main/book_list.html' def get_queryset ( self ): self . author = get_object_or_404 ( Author , name = self . kwargs [ 'author' ]) return Book . objects . filter ( author = self . author ) ::: Potrebno je dodati putanju unutar views.py . :::info main/views.py path ( \"<author>\" , AuthorBookList . as_view ()) ::: Zatim je potrebno izmjeniti predlo\u017eak, odnosno dodati linkvoe koji vode na autore. :::info author_list.html {% extends \"base_generic.html\" %} {% block content %} < br > < h2 > Books </ h2 > < br > {% for book in book_list %} < div class = \"book\" > < h4 > {{ book.title }} </ h4 > Author: < a href = \"{{book.author}}\" > {{book.author}} </ a > < p > {{ book.abstract }} </ p > </ div > {% endfor %} {% endblock %} ::: Izmjenimo i predlo\u017eak za prikaz knjiga. :::info book_list.html {% extends \"base_generic.html\" %} {% block content %} < br > < h2 > Authors </ h2 > < br > {% for author in author_list %} < div class = \"author\" > < h4 > {{author.name}} </ h4 > City: {{author.city}} < br > Country: {{author.country}} < br > < a href = \"{{author.name}}\" > All books by {{author.name}} </ a > </ div > {% endfor %} {% endblock %} ::: Dopunite style.css tako da dodate obrub na elemente Knjige i Autora. . book { border-color : cyan ; border-style : double ; padding-left : 20 px ; padding-right : 20 px ; padding-bottom : 20 px ; } . author { border-color : olive ; border-style : double ; padding-left : 20 px ; padding-right : 20 px ; padding-bottom : 20 px ; }","title":"Static css"},{"location":"hr/nastava/materijali/python-django-vj7/","text":"Vje\u017ebe 7: Predlo\u0161ci obrazaca. Stvaranje obrazaca iz modela Kreiranje prodlo\u017eaka <!DOCTYPE html> < html lang = \"en\" > < head > </ head > < body > < h1 > My library </ h1 > < div id = \"sidebar\" > {% block sidebar %} < ul > < li >< a href = \"/main\" > Home </ a ></ li > < li >< a href = \"/main/books\" > Books </ a ></ li > < li >< a href = \"/main/authors\" > Authors </ a ></ li > </ ul > {% endblock %} </ div > < div class = \"content\" > {% block content %} {% endblock %} </ div > </ body > </ html > Nasljedivanje u predlosku {% extends \"base_generic.html\" %} {% block content %} < br > < h2 > Books </ h2 > < br > {% for book in book_list %} < div class = \"book\" > < h4 > {{ book.title }} </ h4 > Author: {{book.author}} < p > {{ book.abstract }} </ p > </ div > {% endfor %} {% endblock %} Unutar main/urls.py path(\"books\", BookList.as_view()) main/views.py from django.shortcuts import get_object_or_404 from django.views.generic import ListView from main.models import Author , Book class BookList ( ListView ): model = Book :::success Zadatak Sukladno prethodnom primjeru kreirajte prikaz za sve autore unutar baze. ::: CSS Dodavanje css-a u html template. Uvoz < link rel = \"stylesheet\" href = \"https://www.w3schools.com/html/styles.css\" > < head > < link rel = \"stylesheet\" href = \"https://www.w3schools.com/html/styles.css\" > < title > {% block title %}Knjiznica{% endblock %} </ title > </ head > Static css Unutar main aplikacije potrebno je stvoriti direktorij static a unutar njega style.css . Referenciranje na style.css unutar uplikacije: {% load static %} < link rel = \"stylesheet\" type = \"text/css\" href = \"{% static 'style.css' %}\" > Prikaz unutar HTML templatea: < head > {% load static %} < link rel = \"stylesheet\" type = \"text/css\" href = \"{% static 'style.css' %}\" > < title > {% block title %}Knjiznica{% endblock %} </ title > </ head > :::info style.css mo\u017eete proizvoljno zadati i prilago\u0111avati vlastitim \u017eeljama. ::: :::info main/static/style.css h1 { color : blue ; text-align : center ; } h2 { text-align : center ; } li { list-style-type : none ; float : left ; } li a { padding : 16 px ; } ::: :::success Zadatak Dopunite prikaz na autora tako da njegovo ime bude link. Link neka vodi na prikaz svih knjiga od odabranog autora. ::: Prvo je potrebno kreirati pretra\u017eivanje po tra\u017eenom autoru, a zatim vratiti sve knjige koje su prona\u0111ene za trra\u017eenog autora. :::info main/views.py from django.shortcuts import get_object_or_404 from django.views.generic import ListView from main.models import Author , Book class AuthorBookList ( ListView ): template_name = 'main/book_list.html' def get_queryset ( self ): self . author = get_object_or_404 ( Author , name = self . kwargs [ 'author' ]) return Book . objects . filter ( author = self . author ) ::: Potrebno je dodati putanju unutar views.py . :::info main/views.py path ( \"<author>\" , AuthorBookList . as_view ()) ::: Zatim je potrebno izmjeniti predlo\u017eak, odnosno dodati linkvoe koji vode na autore. :::info author_list.html {% extends \"base_generic.html\" %} {% block content %} < br > < h2 > Books </ h2 > < br > {% for book in book_list %} < div class = \"book\" > < h4 > {{ book.title }} </ h4 > Author: < a href = \"{{book.author}}\" > {{book.author}} </ a > < p > {{ book.abstract }} </ p > </ div > {% endfor %} {% endblock %} ::: Izmjenimo i predlo\u017eak za prikaz knjiga. :::info book_list.html {% extends \"base_generic.html\" %} {% block content %} < br > < h2 > Authors </ h2 > < br > {% for author in author_list %} < div class = \"author\" > < h4 > {{author.name}} </ h4 > City: {{author.city}} < br > Country: {{author.country}} < br > < a href = \"{{author.name}}\" > All books by {{author.name}} </ a > </ div > {% endfor %} {% endblock %} ::: Dopunite style.css tako da dodate obrub na elemente Knjige i Autora. . book { border-color : cyan ; border-style : double ; padding-left : 20 px ; padding-right : 20 px ; padding-bottom : 20 px ; } . author { border-color : olive ; border-style : double ; padding-left : 20 px ; padding-right : 20 px ; padding-bottom : 20 px ; }","title":"Vje\u017eba 7"},{"location":"hr/nastava/materijali/python-django-vj7/#vjezbe-7-predlosci-obrazaca-stvaranje-obrazaca-iz-modela","text":"","title":"Vje\u017ebe 7: Predlo\u0161ci obrazaca. Stvaranje obrazaca iz modela"},{"location":"hr/nastava/materijali/python-django-vj7/#kreiranje-prodlozaka","text":"<!DOCTYPE html> < html lang = \"en\" > < head > </ head > < body > < h1 > My library </ h1 > < div id = \"sidebar\" > {% block sidebar %} < ul > < li >< a href = \"/main\" > Home </ a ></ li > < li >< a href = \"/main/books\" > Books </ a ></ li > < li >< a href = \"/main/authors\" > Authors </ a ></ li > </ ul > {% endblock %} </ div > < div class = \"content\" > {% block content %} {% endblock %} </ div > </ body > </ html >","title":"Kreiranje prodlo\u017eaka"},{"location":"hr/nastava/materijali/python-django-vj7/#nasljedivanje-u-predlosku","text":"{% extends \"base_generic.html\" %} {% block content %} < br > < h2 > Books </ h2 > < br > {% for book in book_list %} < div class = \"book\" > < h4 > {{ book.title }} </ h4 > Author: {{book.author}} < p > {{ book.abstract }} </ p > </ div > {% endfor %} {% endblock %} Unutar main/urls.py path(\"books\", BookList.as_view()) main/views.py from django.shortcuts import get_object_or_404 from django.views.generic import ListView from main.models import Author , Book class BookList ( ListView ): model = Book :::success Zadatak Sukladno prethodnom primjeru kreirajte prikaz za sve autore unutar baze. :::","title":"Nasljedivanje u predlosku"},{"location":"hr/nastava/materijali/python-django-vj7/#css","text":"Dodavanje css-a u html template.","title":"CSS"},{"location":"hr/nastava/materijali/python-django-vj7/#uvoz","text":"< link rel = \"stylesheet\" href = \"https://www.w3schools.com/html/styles.css\" > < head > < link rel = \"stylesheet\" href = \"https://www.w3schools.com/html/styles.css\" > < title > {% block title %}Knjiznica{% endblock %} </ title > </ head >","title":"Uvoz"},{"location":"hr/nastava/materijali/python-django-vj7/#static-css","text":"Unutar main aplikacije potrebno je stvoriti direktorij static a unutar njega style.css . Referenciranje na style.css unutar uplikacije: {% load static %} < link rel = \"stylesheet\" type = \"text/css\" href = \"{% static 'style.css' %}\" > Prikaz unutar HTML templatea: < head > {% load static %} < link rel = \"stylesheet\" type = \"text/css\" href = \"{% static 'style.css' %}\" > < title > {% block title %}Knjiznica{% endblock %} </ title > </ head > :::info style.css mo\u017eete proizvoljno zadati i prilago\u0111avati vlastitim \u017eeljama. ::: :::info main/static/style.css h1 { color : blue ; text-align : center ; } h2 { text-align : center ; } li { list-style-type : none ; float : left ; } li a { padding : 16 px ; } ::: :::success Zadatak Dopunite prikaz na autora tako da njegovo ime bude link. Link neka vodi na prikaz svih knjiga od odabranog autora. ::: Prvo je potrebno kreirati pretra\u017eivanje po tra\u017eenom autoru, a zatim vratiti sve knjige koje su prona\u0111ene za trra\u017eenog autora. :::info main/views.py from django.shortcuts import get_object_or_404 from django.views.generic import ListView from main.models import Author , Book class AuthorBookList ( ListView ): template_name = 'main/book_list.html' def get_queryset ( self ): self . author = get_object_or_404 ( Author , name = self . kwargs [ 'author' ]) return Book . objects . filter ( author = self . author ) ::: Potrebno je dodati putanju unutar views.py . :::info main/views.py path ( \"<author>\" , AuthorBookList . as_view ()) ::: Zatim je potrebno izmjeniti predlo\u017eak, odnosno dodati linkvoe koji vode na autore. :::info author_list.html {% extends \"base_generic.html\" %} {% block content %} < br > < h2 > Books </ h2 > < br > {% for book in book_list %} < div class = \"book\" > < h4 > {{ book.title }} </ h4 > Author: < a href = \"{{book.author}}\" > {{book.author}} </ a > < p > {{ book.abstract }} </ p > </ div > {% endfor %} {% endblock %} ::: Izmjenimo i predlo\u017eak za prikaz knjiga. :::info book_list.html {% extends \"base_generic.html\" %} {% block content %} < br > < h2 > Authors </ h2 > < br > {% for author in author_list %} < div class = \"author\" > < h4 > {{author.name}} </ h4 > City: {{author.city}} < br > Country: {{author.country}} < br > < a href = \"{{author.name}}\" > All books by {{author.name}} </ a > </ div > {% endfor %} {% endblock %} ::: Dopunite style.css tako da dodate obrub na elemente Knjige i Autora. . book { border-color : cyan ; border-style : double ; padding-left : 20 px ; padding-right : 20 px ; padding-bottom : 20 px ; } . author { border-color : olive ; border-style : double ; padding-left : 20 px ; padding-right : 20 px ; padding-bottom : 20 px ; }","title":"Static css"},{"location":"hr/nastava/materijali/python-django-vj9/","text":"Vje\u017ebe 9: Sijanje i migracije Sijanje (seeding) :::info Zadatak Kreirajte projek vj9 i unutar njega aplikaciju main . Unutar modela u aplikaciji main kreirajte klasu Student. Klasa Student neka sadr\u017ei vrijednost first_name . Provedite potrebne naredbe za migraciju. Pokrenite ./manage.py shell i kreirajte jednog studenta ::: S naredbom dumpdata izvozimo vrijednosti iz baze. Detaljnije o naredbi dumpdata . ./manage.py dumpdata main.Student --pk 1 --indent 4 > 0001_student.json :::info Zadatak Izbri\u0161ite iz baze zapis studenta kojeg ste prethodno unjeli. :::spoiler >>> Student . objects . filter ( pk = 1 ) . delete () ::: Za uvoz podataka u bazu koristimo naredbu loaddata . Detaljnije o naredbi loaddata . :::info Zadatak Uvezite prethodno kreirani 0001_student.json u bazu. ::: Django Fixture Fixture je zbirka podataka koje Django uvozi u bazu podataka. Najjednostavniji na;in rada sa podacima je pomo\u0107u naredbi dumpdata i loaddata . django-seed pip3 install django-seed Python modul pomo\u0107u kojeg se mogu generirati podaci za bazu podataka. U pozadini koristi biblioteku faker za generiranje testnih podataka. Detaljnije o django-seed mo\u017eete prona\u0107i u dokumentaciji . Brisanje podataka sijanja U nastavku je generirana skripta revert_seed.py pomo\u0107u koje bri\u0161emo vrijednosti iz baze koje smo prethodno stvorili i unosili sijanjem. import json import glob g = globals () has_access = {} fixtures = glob . glob ( \"*.json\" ) fixtures . sort ( reverse = True ) def get_access ( model ): import importlib mod = importlib . import_module ( model ) names = getattr ( mod , '__all__' , [ n for n in dir ( mod ) if not n . startswith ( '_' )]) global g for name in names : g [ name . lower ()] = { 'var' : getattr ( mod , name ), 'name' : name } for fixture in fixtures : msg = 'Reverting ' + fixture + ' \\n ' with open ( fixture ) as json_file : datas = json . load ( json_file ) for data in datas : app_name = data [ 'model' ] . split ( '.' )[ 0 ] class_name = data [ 'model' ] . split ( '.' )[ 1 ] if app_name not in has_access . keys (): get_access ( app_name + '.models' ) has_access [ app_name ] = True class_model = g [ class_name ][ 'var' ] class_model_name = g [ class_name ][ 'name' ] pk = data [ 'pk' ] msg += ' {} (pk= {} ): ' . format ( class_model_name , pk ) try : class_model . objects . get ( pk = pk ) . delete () msg += 'deleted \\n ' except : msg += 'not deleted \\n ' print ( msg ) Skriptu pokrenite sa naredbom: manage.py shell < revert_seed.py U\u010ditavanje podataka sijanja u Testiranje Testirajmo rad tako da dohvatimo podatke o studentu koji ima primarni klju\u010d 1 i \u010dije ime je Ivo. #test.py from django.test import TestCase from main.models import Student class MyTest ( TestCase ): # fixtures = [\"0001_student.json\"] def test_should_create_group ( self ): s = Student . objects . get ( pk = 1 ) self . assertEqual ( s . first_name , \"ivo\" ) Kreirani test pokrenite u terminalu s naredbom: ./manage.py test test >>> from django.contrib.auth.models import User , Group >>> Group . objects . create ( name = \"useregroup\" ) >>> usergroup = Group . objects . get ( name = \"useregroup\" ) >>> ivo = User . objects . create_user ( \"ivo\" ) >>> ivo . pk >>> ivo . groups . add ( usergroup ) >>> python manage.py dumpdata auth.User --pk 1 --indent 4 >>> python manage.py dumpdata auth.User --pk 1 --indent 4 --natural-foreign","title":"Vje\u017eba 9"},{"location":"hr/nastava/materijali/python-django-vj9/#vjezbe-9-sijanje-i-migracije","text":"","title":"Vje\u017ebe 9: Sijanje i migracije"},{"location":"hr/nastava/materijali/python-django-vj9/#sijanje-seeding","text":":::info Zadatak Kreirajte projek vj9 i unutar njega aplikaciju main . Unutar modela u aplikaciji main kreirajte klasu Student. Klasa Student neka sadr\u017ei vrijednost first_name . Provedite potrebne naredbe za migraciju. Pokrenite ./manage.py shell i kreirajte jednog studenta ::: S naredbom dumpdata izvozimo vrijednosti iz baze. Detaljnije o naredbi dumpdata . ./manage.py dumpdata main.Student --pk 1 --indent 4 > 0001_student.json :::info Zadatak Izbri\u0161ite iz baze zapis studenta kojeg ste prethodno unjeli. :::spoiler >>> Student . objects . filter ( pk = 1 ) . delete () ::: Za uvoz podataka u bazu koristimo naredbu loaddata . Detaljnije o naredbi loaddata . :::info Zadatak Uvezite prethodno kreirani 0001_student.json u bazu. :::","title":"Sijanje (seeding)"},{"location":"hr/nastava/materijali/python-django-vj9/#django-fixture","text":"Fixture je zbirka podataka koje Django uvozi u bazu podataka. Najjednostavniji na;in rada sa podacima je pomo\u0107u naredbi dumpdata i loaddata .","title":"Django Fixture"},{"location":"hr/nastava/materijali/python-django-vj9/#django-seed","text":"pip3 install django-seed Python modul pomo\u0107u kojeg se mogu generirati podaci za bazu podataka. U pozadini koristi biblioteku faker za generiranje testnih podataka. Detaljnije o django-seed mo\u017eete prona\u0107i u dokumentaciji .","title":"django-seed"},{"location":"hr/nastava/materijali/python-django-vj9/#brisanje-podataka-sijanja","text":"U nastavku je generirana skripta revert_seed.py pomo\u0107u koje bri\u0161emo vrijednosti iz baze koje smo prethodno stvorili i unosili sijanjem. import json import glob g = globals () has_access = {} fixtures = glob . glob ( \"*.json\" ) fixtures . sort ( reverse = True ) def get_access ( model ): import importlib mod = importlib . import_module ( model ) names = getattr ( mod , '__all__' , [ n for n in dir ( mod ) if not n . startswith ( '_' )]) global g for name in names : g [ name . lower ()] = { 'var' : getattr ( mod , name ), 'name' : name } for fixture in fixtures : msg = 'Reverting ' + fixture + ' \\n ' with open ( fixture ) as json_file : datas = json . load ( json_file ) for data in datas : app_name = data [ 'model' ] . split ( '.' )[ 0 ] class_name = data [ 'model' ] . split ( '.' )[ 1 ] if app_name not in has_access . keys (): get_access ( app_name + '.models' ) has_access [ app_name ] = True class_model = g [ class_name ][ 'var' ] class_model_name = g [ class_name ][ 'name' ] pk = data [ 'pk' ] msg += ' {} (pk= {} ): ' . format ( class_model_name , pk ) try : class_model . objects . get ( pk = pk ) . delete () msg += 'deleted \\n ' except : msg += 'not deleted \\n ' print ( msg ) Skriptu pokrenite sa naredbom: manage.py shell < revert_seed.py","title":"Brisanje podataka sijanja"},{"location":"hr/nastava/materijali/python-django-vj9/#ucitavanje-podataka-sijanja-u-testiranje","text":"Testirajmo rad tako da dohvatimo podatke o studentu koji ima primarni klju\u010d 1 i \u010dije ime je Ivo. #test.py from django.test import TestCase from main.models import Student class MyTest ( TestCase ): # fixtures = [\"0001_student.json\"] def test_should_create_group ( self ): s = Student . objects . get ( pk = 1 ) self . assertEqual ( s . first_name , \"ivo\" ) Kreirani test pokrenite u terminalu s naredbom: ./manage.py test test >>> from django.contrib.auth.models import User , Group >>> Group . objects . create ( name = \"useregroup\" ) >>> usergroup = Group . objects . get ( name = \"useregroup\" ) >>> ivo = User . objects . create_user ( \"ivo\" ) >>> ivo . pk >>> ivo . groups . add ( usergroup ) >>> python manage.py dumpdata auth.User --pk 1 --indent 4 >>> python manage.py dumpdata auth.User --pk 1 --indent 4 --natural-foreign","title":"U\u010ditavanje podataka sijanja u Testiranje"}]}